import puzzle_pieces_v015.aleo;
program football_game_v001.aleo;


















struct Player:
    player_id as u8;
    team_id as u8;
    goalkeeper as boolean;
    attack as u8;
    defense as u8;
    speed as u8;
    power as u8;
    stamina as u8;
    technique as u8;
    goalkeeping as u8;

struct GameResult:
    goals_home as u64;
    goals_away as u64;

record Game:
    owner as address.private;
    challenger_commit as field.private;
    opponent_answer as [Player; 11u32].private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    game_multisig as address.private;
    game_state as field.private;
    ix as u32.private;

record GameReqNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record WaitingAcceptanceNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record StakeRenegedNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    renege_address as address.private;
    ix as u32.private;

record ChallengerWagerNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record OpponentWagerNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record WaitingRevealNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record RevealAnswerNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    opponent_answer as [Player; 11u32].private;
    ix as u32.private;

record GameFinishReqNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    challenger_answer as [Player; 11u32].private;
    opponent_answer as [Player; 11u32].private;
    winner as address.private;
    loser as address.private;
    goals_home as u64.private;
    goals_away as u64.private;
    ix as u32.private;

record GameFinishedNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    winner as address.private;
    loser as address.private;
    ix as u32.private;

struct Mssage:
    field_1 as field;
    field_2 as field;
    field_3 as field;
    field_4 as field;
    field_5 as field;

record Answer:
    owner as address.private;
    challenger_address as address.private;
    opponent_address as address.private;
    game_multisig as address.private;
    amount as u64.private;
    nonce as field.private;
    answer as [Player; 11u32].private;
    message_1 as field.private;
    message_2 as field.private;
    message_3 as field.private;
    message_4 as field.private;
    message_5 as field.private;
    ix as u32.private;

record AuditMintAnswer:
    owner as address.private;
    answer_owner as address.private;
    challenger_address as address.private;
    opponent_address as address.private;
    game_multisig as address.private;
    amount as u64.private;
    nonce as field.private;
    answer as [Player; 11u32].private;
    message_1 as field.private;
    message_2 as field.private;
    message_3 as field.private;
    message_4 as field.private;
    message_5 as field.private;
    ix as u32.private;

record RevealAnswer:
    owner as address.private;
    challenger_address as address.private;
    opponent_address as address.private;
    game_multisig as address.private;
    amount as u64.private;
    nonce as field.private;
    answer as [Player; 11u32].private;
    sig as signature.private;
    ix as u32.private;

record AuditRevealAnswer:
    owner as address.private;
    challenger_address as address.private;
    opponent_address as address.private;
    game_multisig as address.private;
    amount as u64.private;
    nonce as field.private;
    answer as [Player; 11u32].private;
    sig as signature.private;
    ix as u32.private;

record Key:
    owner as address.private;
    seed as field.private;
    amount as u64.private;
    challenger as address.private;
    opponent as address.private;
    game_multisig as address.private;
    ix as u32.private;

record AuditKey:
    owner as address.private;
    seed as field.private;
    amount as u64.private;
    challenger as address.private;
    opponent as address.private;
    game_multisig as address.private;
    ix as u32.private;


function main:
    input r0 as boolean.private;


function propose_game:
    input r0 as puzzle_pieces_v015.aleo/Piece.record;
    input r1 as u64.private;
    input r2 as address.private;
    input r3 as address.private;
    input r4 as address.private;
    input r5 as address.private;
    input r6 as field.private;
    input r7 as field.private;
    input r8 as field.private;
    input r9 as field.private;
    input r10 as field.private;
    input r11 as signature.private;
    input r12 as field.private;
    input r13 as [Player; 11u32].private;
    input r14 as field.private;
    assert.eq self.caller self.signer;
    assert.neq r5 r4;
    cast r12 into r15 as scalar;
    commit.bhp256 r13 r15 into r16 as field;
    gt r1 0u64 into r17;
    assert.eq r17 true;
    gte r0.amount r1 into r18;
    assert.eq r18 true;
    call puzzle_pieces_v015.aleo/stake_transfer_in r0 r2 r3 r4 r5 r1 r6 r7 r8 r9 r10 r11 into r19 r20 r21 r22 r23;
    cast r4 r14 r1 r3 r4 r5 5u32 into r24 as Key.record;
    cast aleo16hf8hfpwasnn9cf7k2c0dllc56nn7qt547qxgvgwu6pznw4trvqsx68kls r14 r1 r3 r4 r5 6u32 into r25 as AuditKey.record;
    add r1 r1 into r26;
    cast r4 r5 1field true r26 r3 r4 2u32 into r27 as GameReqNotification.record;
    add r1 r1 into r28;
    cast r3 r5 1field false r28 r3 r4 3u32 into r29 as WaitingAcceptanceNotification.record;
    cast 0u8 0u8 false 0u8 0u8 0u8 0u8 0u8 0u8 0u8 into r30 as Player;
    cast r30r30r30r30r30r30r30r30r30r30r30 into r31 as [Player; 11u32];
    add r1 r1 into r32;
    cast r5 r16 r31 r32 r3 r4 r5 1field 1u32 into r33 as Game.record;
    cast r6 r7 r8 r9 r10 into r34 as Mssage;
    sign.verify r11 r3 r34 into r35;
    assert.eq true r35;
    cast r3 r3 r4 r5 r1 r12 r13 r6 r7 r8 r9 r10 1u32 into r36 as Answer.record;
    cast aleo16hf8hfpwasnn9cf7k2c0dllc56nn7qt547qxgvgwu6pznw4trvqsx68kls r3 r3 r4 r5 r1 r12 r13 r6 r7 r8 r9 r10 2u32 into r37 as AuditMintAnswer.record;
    output r19 as puzzle_pieces_v015.aleo/PieceClaim.record;
    output r20 as puzzle_pieces_v015.aleo/PieceStake.record;
    output r21 as puzzle_pieces_v015.aleo/ClaimSignature.record;
    output r22 as puzzle_pieces_v015.aleo/Piece.record;
    output r23 as puzzle_pieces_v015.aleo/AuditStakeIn.record;
    output r36 as Answer.record;
    output r37 as AuditMintAnswer.record;
    output r24 as Key.record;
    output r25 as AuditKey.record;
    output r33 as Game.record;
    output r27 as GameReqNotification.record;
    output r29 as WaitingAcceptanceNotification.record;


function challenger_renege_stake:
    input r0 as WaitingAcceptanceNotification.record;
    input r1 as puzzle_pieces_v015.aleo/PieceStake.record;
    input r2 as puzzle_pieces_v015.aleo/PieceClaim.record;
    input r3 as signature.private;
    assert.eq self.caller self.signer;
    call puzzle_pieces_v015.aleo/stake_transfer_out r1 r2 r3 into r4 r5;
    cast r0.challenger_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.challenger_address 4u32 into r6 as StakeRenegedNotification.record;
    cast r0.opponent_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.challenger_address 4u32 into r7 as StakeRenegedNotification.record;
    output r4 as puzzle_pieces_v015.aleo/Piece.record;
    output r5 as puzzle_pieces_v015.aleo/AuditStakeOut.record;
    output r6 as StakeRenegedNotification.record;
    output r7 as StakeRenegedNotification.record;


function submit_wager:
    input r0 as puzzle_pieces_v015.aleo/Piece.record;
    input r1 as Key.record;
    input r2 as GameReqNotification.record;
    input r3 as field.private;
    input r4 as field.private;
    input r5 as field.private;
    input r6 as field.private;
    input r7 as field.private;
    input r8 as signature.private;
    assert.eq self.caller self.signer;
    gt r0.amount 0u64 into r9;
    assert.eq r9 true;
    div r2.total_pot 2u64 into r10;
    gte r0.amount r10 into r11;
    assert.eq r11 true;
    div r2.total_pot 2u64 into r12;
    call puzzle_pieces_v015.aleo/stake_transfer_in r0 r2.opponent_address r2.challenger_address r2.opponent_address r2.game_multisig r12 r3 r4 r5 r6 r7 r8 into r13 r14 r15 r16 r17;
    cast r2.challenger_address r2.game_multisig 2field false r2.total_pot r2.challenger_address r2.opponent_address 5u32 into r18 as ChallengerWagerNotification.record;
    cast r2.opponent_address r2.game_multisig 2field true r2.total_pot r2.challenger_address r2.opponent_address 6u32 into r19 as OpponentWagerNotification.record;
    output r13 as puzzle_pieces_v015.aleo/PieceClaim.record;
    output r14 as puzzle_pieces_v015.aleo/PieceStake.record;
    output r15 as puzzle_pieces_v015.aleo/ClaimSignature.record;
    output r16 as puzzle_pieces_v015.aleo/Piece.record;
    output r17 as puzzle_pieces_v015.aleo/AuditStakeIn.record;
    output r18 as ChallengerWagerNotification.record;
    output r19 as OpponentWagerNotification.record;


function opponent_renege_stake:
    input r0 as WaitingAcceptanceNotification.record;
    input r1 as puzzle_pieces_v015.aleo/PieceStake.record;
    input r2 as puzzle_pieces_v015.aleo/PieceClaim.record;
    input r3 as signature.private;
    assert.eq self.caller self.signer;
    call puzzle_pieces_v015.aleo/stake_transfer_out r1 r2 r3 into r4 r5;
    cast r0.challenger_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address 4u32 into r6 as StakeRenegedNotification.record;
    cast r0.opponent_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address 4u32 into r7 as StakeRenegedNotification.record;
    output r4 as puzzle_pieces_v015.aleo/Piece.record;
    output r5 as puzzle_pieces_v015.aleo/AuditStakeOut.record;
    output r6 as StakeRenegedNotification.record;
    output r7 as StakeRenegedNotification.record;


function accept_game:
    input r0 as Game.record;
    input r1 as [Player; 11u32].private;
    input r2 as puzzle_pieces_v015.aleo/PieceStake.record;
    input r3 as puzzle_pieces_v015.aleo/PieceClaim.record;
    input r4 as puzzle_pieces_v015.aleo/PieceStake.record;
    input r5 as puzzle_pieces_v015.aleo/PieceClaim.record;
    input r6 as u32.private;
    assert.eq r0.owner self.signer;
    assert.eq self.caller self.signer;
    call puzzle_pieces_v015.aleo/transfer_stakes_to_joint r2 r3 r4 r5 r6 into r7 r8 r9 r10;
    cast r0.opponent_address r0.owner 3field false r0.total_pot r0.challenger_address r0.opponent_address 7u32 into r11 as WaitingRevealNotification.record;
    cast r0.challenger_address r0.owner 3field true r0.total_pot r0.challenger_address r0.opponent_address r1 8u32 into r12 as RevealAnswerNotification.record;
    cast r0.owner r0.challenger_commit r1 r0.total_pot r0.challenger_address r0.opponent_address r0.game_multisig 3field 1u32 into r13 as Game.record;
    async accept_game r6 into r14;
    output r7 as puzzle_pieces_v015.aleo/PieceJointStake.record;
    output r8 as puzzle_pieces_v015.aleo/JointPieceTimeClaim.record;
    output r9 as puzzle_pieces_v015.aleo/JointPieceState.record;
    output r10 as puzzle_pieces_v015.aleo/AuditJointStake.record;
    output r11 as WaitingRevealNotification.record;
    output r12 as RevealAnswerNotification.record;
    output r13 as Game.record;
    output r14 as football_game_v001.aleo/accept_game.future;

finalize accept_game:
    input r0 as u32.public;
    sub block.height 1000u32 into r1;
    gte r0 r1 into r2;
    assert.eq r2 true;
    add block.height 1000u32 into r3;
    lte r0 r3 into r4;
    assert.eq r4 true;


function reveal_answer_game:
    input r0 as RevealAnswerNotification.record;
    input r1 as Answer.record;
    input r2 as puzzle_pieces_v015.aleo/JointPieceState.record;
    input r3 as puzzle_pieces_v015.aleo/ClaimSignature.record;
    assert.eq r2.state_updater_address self.signer;
    assert.eq self.caller self.signer;
    gt r1.answer[1u32].speed r0.opponent_answer[1u32].speed into r4;
    ternary r4 r1.answer[1u32].player_id r0.opponent_answer[1u32].player_id into r5;
    ternary r4 r1.answer[1u32].team_id r0.opponent_answer[1u32].team_id into r6;
    ternary r4 r1.answer[1u32].goalkeeper r0.opponent_answer[1u32].goalkeeper into r7;
    ternary r4 r1.answer[1u32].attack r0.opponent_answer[1u32].attack into r8;
    ternary r4 r1.answer[1u32].defense r0.opponent_answer[1u32].defense into r9;
    ternary r4 r1.answer[1u32].speed r0.opponent_answer[1u32].speed into r10;
    ternary r4 r1.answer[1u32].power r0.opponent_answer[1u32].power into r11;
    ternary r4 r1.answer[1u32].stamina r0.opponent_answer[1u32].stamina into r12;
    ternary r4 r1.answer[1u32].technique r0.opponent_answer[1u32].technique into r13;
    ternary r4 r1.answer[1u32].goalkeeping r0.opponent_answer[1u32].goalkeeping into r14;
    cast r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 into r15 as Player;
    gt r1.answer[1u32].speed r0.opponent_answer[1u32].speed into r16;
    ternary r16 r0.opponent_answer[1u32].player_id r1.answer[1u32].player_id into r17;
    ternary r16 r0.opponent_answer[1u32].team_id r1.answer[1u32].team_id into r18;
    ternary r16 r0.opponent_answer[1u32].goalkeeper r1.answer[1u32].goalkeeper into r19;
    ternary r16 r0.opponent_answer[1u32].attack r1.answer[1u32].attack into r20;
    ternary r16 r0.opponent_answer[1u32].defense r1.answer[1u32].defense into r21;
    ternary r16 r0.opponent_answer[1u32].speed r1.answer[1u32].speed into r22;
    ternary r16 r0.opponent_answer[1u32].power r1.answer[1u32].power into r23;
    ternary r16 r0.opponent_answer[1u32].stamina r1.answer[1u32].stamina into r24;
    ternary r16 r0.opponent_answer[1u32].technique r1.answer[1u32].technique into r25;
    ternary r16 r0.opponent_answer[1u32].goalkeeping r1.answer[1u32].goalkeeping into r26;
    cast r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 into r27 as Player;
    gt r1.answer[1u32].speed r0.opponent_answer[1u32].speed into r28;
    ternary r28 r0.opponent_answer[0u32].player_id r1.answer[0u32].player_id into r29;
    ternary r28 r0.opponent_answer[0u32].team_id r1.answer[0u32].team_id into r30;
    ternary r28 r0.opponent_answer[0u32].goalkeeper r1.answer[0u32].goalkeeper into r31;
    ternary r28 r0.opponent_answer[0u32].attack r1.answer[0u32].attack into r32;
    ternary r28 r0.opponent_answer[0u32].defense r1.answer[0u32].defense into r33;
    ternary r28 r0.opponent_answer[0u32].speed r1.answer[0u32].speed into r34;
    ternary r28 r0.opponent_answer[0u32].power r1.answer[0u32].power into r35;
    ternary r28 r0.opponent_answer[0u32].stamina r1.answer[0u32].stamina into r36;
    ternary r28 r0.opponent_answer[0u32].technique r1.answer[0u32].technique into r37;
    ternary r28 r0.opponent_answer[0u32].goalkeeping r1.answer[0u32].goalkeeping into r38;
    cast r29 r30 r31 r32 r33 r34 r35 r36 r37 r38 into r39 as Player;
    is.eq 1u8 10u8 into r40;
    is.eq 0u64 0u64 into r41;
    and r40 r41 into r42;
    lt r1.answer[1u32].speed r0.opponent_answer[1u32].speed into r43;
    add 0u64 1u64 into r44;
    add 0u64 1u64 into r45;
    ternary r43 r44 0u64 into r46;
    ternary r43 0u64 r45 into r47;
    gt r15.attack 127u8 into r48;
    lt r27.defense 127u8 into r49;
    lt r39.goalkeeping 127u8 into r50;
    lt r1.answer[1u32].speed r0.opponent_answer[1u32].speed into r51;
    add 0u64 1u64 into r52;
    add 0u64 1u64 into r53;
    ternary r51 r52 0u64 into r54;
    ternary r51 0u64 r53 into r55;
    ternary r50 r54 0u64 into r56;
    ternary r50 r55 0u64 into r57;
    ternary r49 r56 0u64 into r58;
    ternary r49 r57 0u64 into r59;
    ternary r48 r58 0u64 into r60;
    ternary r48 r59 0u64 into r61;
    ternary r42 r46 r60 into r62;
    ternary r42 r47 r61 into r63;
    gt r1.answer[2u32].speed r0.opponent_answer[2u32].speed into r64;
    ternary r64 r1.answer[2u32].player_id r0.opponent_answer[2u32].player_id into r65;
    ternary r64 r1.answer[2u32].team_id r0.opponent_answer[2u32].team_id into r66;
    ternary r64 r1.answer[2u32].goalkeeper r0.opponent_answer[2u32].goalkeeper into r67;
    ternary r64 r1.answer[2u32].attack r0.opponent_answer[2u32].attack into r68;
    ternary r64 r1.answer[2u32].defense r0.opponent_answer[2u32].defense into r69;
    ternary r64 r1.answer[2u32].speed r0.opponent_answer[2u32].speed into r70;
    ternary r64 r1.answer[2u32].power r0.opponent_answer[2u32].power into r71;
    ternary r64 r1.answer[2u32].stamina r0.opponent_answer[2u32].stamina into r72;
    ternary r64 r1.answer[2u32].technique r0.opponent_answer[2u32].technique into r73;
    ternary r64 r1.answer[2u32].goalkeeping r0.opponent_answer[2u32].goalkeeping into r74;
    cast r65 r66 r67 r68 r69 r70 r71 r72 r73 r74 into r75 as Player;
    gt r1.answer[2u32].speed r0.opponent_answer[2u32].speed into r76;
    ternary r76 r0.opponent_answer[2u32].player_id r1.answer[2u32].player_id into r77;
    ternary r76 r0.opponent_answer[2u32].team_id r1.answer[2u32].team_id into r78;
    ternary r76 r0.opponent_answer[2u32].goalkeeper r1.answer[2u32].goalkeeper into r79;
    ternary r76 r0.opponent_answer[2u32].attack r1.answer[2u32].attack into r80;
    ternary r76 r0.opponent_answer[2u32].defense r1.answer[2u32].defense into r81;
    ternary r76 r0.opponent_answer[2u32].speed r1.answer[2u32].speed into r82;
    ternary r76 r0.opponent_answer[2u32].power r1.answer[2u32].power into r83;
    ternary r76 r0.opponent_answer[2u32].stamina r1.answer[2u32].stamina into r84;
    ternary r76 r0.opponent_answer[2u32].technique r1.answer[2u32].technique into r85;
    ternary r76 r0.opponent_answer[2u32].goalkeeping r1.answer[2u32].goalkeeping into r86;
    cast r77 r78 r79 r80 r81 r82 r83 r84 r85 r86 into r87 as Player;
    gt r1.answer[2u32].speed r0.opponent_answer[2u32].speed into r88;
    ternary r88 r0.opponent_answer[0u32].player_id r1.answer[0u32].player_id into r89;
    ternary r88 r0.opponent_answer[0u32].team_id r1.answer[0u32].team_id into r90;
    ternary r88 r0.opponent_answer[0u32].goalkeeper r1.answer[0u32].goalkeeper into r91;
    ternary r88 r0.opponent_answer[0u32].attack r1.answer[0u32].attack into r92;
    ternary r88 r0.opponent_answer[0u32].defense r1.answer[0u32].defense into r93;
    ternary r88 r0.opponent_answer[0u32].speed r1.answer[0u32].speed into r94;
    ternary r88 r0.opponent_answer[0u32].power r1.answer[0u32].power into r95;
    ternary r88 r0.opponent_answer[0u32].stamina r1.answer[0u32].stamina into r96;
    ternary r88 r0.opponent_answer[0u32].technique r1.answer[0u32].technique into r97;
    ternary r88 r0.opponent_answer[0u32].goalkeeping r1.answer[0u32].goalkeeping into r98;
    cast r89 r90 r91 r92 r93 r94 r95 r96 r97 r98 into r99 as Player;
    is.eq 2u8 10u8 into r100;
    is.eq r63 r62 into r101;
    and r100 r101 into r102;
    lt r1.answer[2u32].speed r0.opponent_answer[2u32].speed into r103;
    add r62 1u64 into r104;
    add r63 1u64 into r105;
    ternary r103 r104 r62 into r106;
    ternary r103 r63 r105 into r107;
    gt r75.attack 127u8 into r108;
    lt r87.defense 127u8 into r109;
    lt r99.goalkeeping 127u8 into r110;
    lt r1.answer[2u32].speed r0.opponent_answer[2u32].speed into r111;
    add r62 1u64 into r112;
    add r63 1u64 into r113;
    ternary r111 r112 r62 into r114;
    ternary r111 r63 r113 into r115;
    ternary r110 r114 r62 into r116;
    ternary r110 r115 r63 into r117;
    ternary r109 r116 r62 into r118;
    ternary r109 r117 r63 into r119;
    ternary r108 r118 r62 into r120;
    ternary r108 r119 r63 into r121;
    ternary r102 r106 r120 into r122;
    ternary r102 r107 r121 into r123;
    gt r1.answer[3u32].speed r0.opponent_answer[3u32].speed into r124;
    ternary r124 r1.answer[3u32].player_id r0.opponent_answer[3u32].player_id into r125;
    ternary r124 r1.answer[3u32].team_id r0.opponent_answer[3u32].team_id into r126;
    ternary r124 r1.answer[3u32].goalkeeper r0.opponent_answer[3u32].goalkeeper into r127;
    ternary r124 r1.answer[3u32].attack r0.opponent_answer[3u32].attack into r128;
    ternary r124 r1.answer[3u32].defense r0.opponent_answer[3u32].defense into r129;
    ternary r124 r1.answer[3u32].speed r0.opponent_answer[3u32].speed into r130;
    ternary r124 r1.answer[3u32].power r0.opponent_answer[3u32].power into r131;
    ternary r124 r1.answer[3u32].stamina r0.opponent_answer[3u32].stamina into r132;
    ternary r124 r1.answer[3u32].technique r0.opponent_answer[3u32].technique into r133;
    ternary r124 r1.answer[3u32].goalkeeping r0.opponent_answer[3u32].goalkeeping into r134;
    cast r125 r126 r127 r128 r129 r130 r131 r132 r133 r134 into r135 as Player;
    gt r1.answer[3u32].speed r0.opponent_answer[3u32].speed into r136;
    ternary r136 r0.opponent_answer[3u32].player_id r1.answer[3u32].player_id into r137;
    ternary r136 r0.opponent_answer[3u32].team_id r1.answer[3u32].team_id into r138;
    ternary r136 r0.opponent_answer[3u32].goalkeeper r1.answer[3u32].goalkeeper into r139;
    ternary r136 r0.opponent_answer[3u32].attack r1.answer[3u32].attack into r140;
    ternary r136 r0.opponent_answer[3u32].defense r1.answer[3u32].defense into r141;
    ternary r136 r0.opponent_answer[3u32].speed r1.answer[3u32].speed into r142;
    ternary r136 r0.opponent_answer[3u32].power r1.answer[3u32].power into r143;
    ternary r136 r0.opponent_answer[3u32].stamina r1.answer[3u32].stamina into r144;
    ternary r136 r0.opponent_answer[3u32].technique r1.answer[3u32].technique into r145;
    ternary r136 r0.opponent_answer[3u32].goalkeeping r1.answer[3u32].goalkeeping into r146;
    cast r137 r138 r139 r140 r141 r142 r143 r144 r145 r146 into r147 as Player;
    gt r1.answer[3u32].speed r0.opponent_answer[3u32].speed into r148;
    ternary r148 r0.opponent_answer[0u32].player_id r1.answer[0u32].player_id into r149;
    ternary r148 r0.opponent_answer[0u32].team_id r1.answer[0u32].team_id into r150;
    ternary r148 r0.opponent_answer[0u32].goalkeeper r1.answer[0u32].goalkeeper into r151;
    ternary r148 r0.opponent_answer[0u32].attack r1.answer[0u32].attack into r152;
    ternary r148 r0.opponent_answer[0u32].defense r1.answer[0u32].defense into r153;
    ternary r148 r0.opponent_answer[0u32].speed r1.answer[0u32].speed into r154;
    ternary r148 r0.opponent_answer[0u32].power r1.answer[0u32].power into r155;
    ternary r148 r0.opponent_answer[0u32].stamina r1.answer[0u32].stamina into r156;
    ternary r148 r0.opponent_answer[0u32].technique r1.answer[0u32].technique into r157;
    ternary r148 r0.opponent_answer[0u32].goalkeeping r1.answer[0u32].goalkeeping into r158;
    cast r149 r150 r151 r152 r153 r154 r155 r156 r157 r158 into r159 as Player;
    is.eq 3u8 10u8 into r160;
    is.eq r123 r122 into r161;
    and r160 r161 into r162;
    lt r1.answer[3u32].speed r0.opponent_answer[3u32].speed into r163;
    add r122 1u64 into r164;
    add r123 1u64 into r165;
    ternary r163 r164 r122 into r166;
    ternary r163 r123 r165 into r167;
    gt r135.attack 127u8 into r168;
    lt r147.defense 127u8 into r169;
    lt r159.goalkeeping 127u8 into r170;
    lt r1.answer[3u32].speed r0.opponent_answer[3u32].speed into r171;
    add r122 1u64 into r172;
    add r123 1u64 into r173;
    ternary r171 r172 r122 into r174;
    ternary r171 r123 r173 into r175;
    ternary r170 r174 r122 into r176;
    ternary r170 r175 r123 into r177;
    ternary r169 r176 r122 into r178;
    ternary r169 r177 r123 into r179;
    ternary r168 r178 r122 into r180;
    ternary r168 r179 r123 into r181;
    ternary r162 r166 r180 into r182;
    ternary r162 r167 r181 into r183;
    gt r1.answer[4u32].speed r0.opponent_answer[4u32].speed into r184;
    ternary r184 r1.answer[4u32].player_id r0.opponent_answer[4u32].player_id into r185;
    ternary r184 r1.answer[4u32].team_id r0.opponent_answer[4u32].team_id into r186;
    ternary r184 r1.answer[4u32].goalkeeper r0.opponent_answer[4u32].goalkeeper into r187;
    ternary r184 r1.answer[4u32].attack r0.opponent_answer[4u32].attack into r188;
    ternary r184 r1.answer[4u32].defense r0.opponent_answer[4u32].defense into r189;
    ternary r184 r1.answer[4u32].speed r0.opponent_answer[4u32].speed into r190;
    ternary r184 r1.answer[4u32].power r0.opponent_answer[4u32].power into r191;
    ternary r184 r1.answer[4u32].stamina r0.opponent_answer[4u32].stamina into r192;
    ternary r184 r1.answer[4u32].technique r0.opponent_answer[4u32].technique into r193;
    ternary r184 r1.answer[4u32].goalkeeping r0.opponent_answer[4u32].goalkeeping into r194;
    cast r185 r186 r187 r188 r189 r190 r191 r192 r193 r194 into r195 as Player;
    gt r1.answer[4u32].speed r0.opponent_answer[4u32].speed into r196;
    ternary r196 r0.opponent_answer[4u32].player_id r1.answer[4u32].player_id into r197;
    ternary r196 r0.opponent_answer[4u32].team_id r1.answer[4u32].team_id into r198;
    ternary r196 r0.opponent_answer[4u32].goalkeeper r1.answer[4u32].goalkeeper into r199;
    ternary r196 r0.opponent_answer[4u32].attack r1.answer[4u32].attack into r200;
    ternary r196 r0.opponent_answer[4u32].defense r1.answer[4u32].defense into r201;
    ternary r196 r0.opponent_answer[4u32].speed r1.answer[4u32].speed into r202;
    ternary r196 r0.opponent_answer[4u32].power r1.answer[4u32].power into r203;
    ternary r196 r0.opponent_answer[4u32].stamina r1.answer[4u32].stamina into r204;
    ternary r196 r0.opponent_answer[4u32].technique r1.answer[4u32].technique into r205;
    ternary r196 r0.opponent_answer[4u32].goalkeeping r1.answer[4u32].goalkeeping into r206;
    cast r197 r198 r199 r200 r201 r202 r203 r204 r205 r206 into r207 as Player;
    gt r1.answer[4u32].speed r0.opponent_answer[4u32].speed into r208;
    ternary r208 r0.opponent_answer[0u32].player_id r1.answer[0u32].player_id into r209;
    ternary r208 r0.opponent_answer[0u32].team_id r1.answer[0u32].team_id into r210;
    ternary r208 r0.opponent_answer[0u32].goalkeeper r1.answer[0u32].goalkeeper into r211;
    ternary r208 r0.opponent_answer[0u32].attack r1.answer[0u32].attack into r212;
    ternary r208 r0.opponent_answer[0u32].defense r1.answer[0u32].defense into r213;
    ternary r208 r0.opponent_answer[0u32].speed r1.answer[0u32].speed into r214;
    ternary r208 r0.opponent_answer[0u32].power r1.answer[0u32].power into r215;
    ternary r208 r0.opponent_answer[0u32].stamina r1.answer[0u32].stamina into r216;
    ternary r208 r0.opponent_answer[0u32].technique r1.answer[0u32].technique into r217;
    ternary r208 r0.opponent_answer[0u32].goalkeeping r1.answer[0u32].goalkeeping into r218;
    cast r209 r210 r211 r212 r213 r214 r215 r216 r217 r218 into r219 as Player;
    is.eq 4u8 10u8 into r220;
    is.eq r183 r182 into r221;
    and r220 r221 into r222;
    lt r1.answer[4u32].speed r0.opponent_answer[4u32].speed into r223;
    add r182 1u64 into r224;
    add r183 1u64 into r225;
    ternary r223 r224 r182 into r226;
    ternary r223 r183 r225 into r227;
    gt r195.attack 127u8 into r228;
    lt r207.defense 127u8 into r229;
    lt r219.goalkeeping 127u8 into r230;
    lt r1.answer[4u32].speed r0.opponent_answer[4u32].speed into r231;
    add r182 1u64 into r232;
    add r183 1u64 into r233;
    ternary r231 r232 r182 into r234;
    ternary r231 r183 r233 into r235;
    ternary r230 r234 r182 into r236;
    ternary r230 r235 r183 into r237;
    ternary r229 r236 r182 into r238;
    ternary r229 r237 r183 into r239;
    ternary r228 r238 r182 into r240;
    ternary r228 r239 r183 into r241;
    ternary r222 r226 r240 into r242;
    ternary r222 r227 r241 into r243;
    gt r1.answer[5u32].speed r0.opponent_answer[5u32].speed into r244;
    ternary r244 r1.answer[5u32].player_id r0.opponent_answer[5u32].player_id into r245;
    ternary r244 r1.answer[5u32].team_id r0.opponent_answer[5u32].team_id into r246;
    ternary r244 r1.answer[5u32].goalkeeper r0.opponent_answer[5u32].goalkeeper into r247;
    ternary r244 r1.answer[5u32].attack r0.opponent_answer[5u32].attack into r248;
    ternary r244 r1.answer[5u32].defense r0.opponent_answer[5u32].defense into r249;
    ternary r244 r1.answer[5u32].speed r0.opponent_answer[5u32].speed into r250;
    ternary r244 r1.answer[5u32].power r0.opponent_answer[5u32].power into r251;
    ternary r244 r1.answer[5u32].stamina r0.opponent_answer[5u32].stamina into r252;
    ternary r244 r1.answer[5u32].technique r0.opponent_answer[5u32].technique into r253;
    ternary r244 r1.answer[5u32].goalkeeping r0.opponent_answer[5u32].goalkeeping into r254;
    cast r245 r246 r247 r248 r249 r250 r251 r252 r253 r254 into r255 as Player;
    gt r1.answer[5u32].speed r0.opponent_answer[5u32].speed into r256;
    ternary r256 r0.opponent_answer[5u32].player_id r1.answer[5u32].player_id into r257;
    ternary r256 r0.opponent_answer[5u32].team_id r1.answer[5u32].team_id into r258;
    ternary r256 r0.opponent_answer[5u32].goalkeeper r1.answer[5u32].goalkeeper into r259;
    ternary r256 r0.opponent_answer[5u32].attack r1.answer[5u32].attack into r260;
    ternary r256 r0.opponent_answer[5u32].defense r1.answer[5u32].defense into r261;
    ternary r256 r0.opponent_answer[5u32].speed r1.answer[5u32].speed into r262;
    ternary r256 r0.opponent_answer[5u32].power r1.answer[5u32].power into r263;
    ternary r256 r0.opponent_answer[5u32].stamina r1.answer[5u32].stamina into r264;
    ternary r256 r0.opponent_answer[5u32].technique r1.answer[5u32].technique into r265;
    ternary r256 r0.opponent_answer[5u32].goalkeeping r1.answer[5u32].goalkeeping into r266;
    cast r257 r258 r259 r260 r261 r262 r263 r264 r265 r266 into r267 as Player;
    gt r1.answer[5u32].speed r0.opponent_answer[5u32].speed into r268;
    ternary r268 r0.opponent_answer[0u32].player_id r1.answer[0u32].player_id into r269;
    ternary r268 r0.opponent_answer[0u32].team_id r1.answer[0u32].team_id into r270;
    ternary r268 r0.opponent_answer[0u32].goalkeeper r1.answer[0u32].goalkeeper into r271;
    ternary r268 r0.opponent_answer[0u32].attack r1.answer[0u32].attack into r272;
    ternary r268 r0.opponent_answer[0u32].defense r1.answer[0u32].defense into r273;
    ternary r268 r0.opponent_answer[0u32].speed r1.answer[0u32].speed into r274;
    ternary r268 r0.opponent_answer[0u32].power r1.answer[0u32].power into r275;
    ternary r268 r0.opponent_answer[0u32].stamina r1.answer[0u32].stamina into r276;
    ternary r268 r0.opponent_answer[0u32].technique r1.answer[0u32].technique into r277;
    ternary r268 r0.opponent_answer[0u32].goalkeeping r1.answer[0u32].goalkeeping into r278;
    cast r269 r270 r271 r272 r273 r274 r275 r276 r277 r278 into r279 as Player;
    is.eq 5u8 10u8 into r280;
    is.eq r243 r242 into r281;
    and r280 r281 into r282;
    lt r1.answer[5u32].speed r0.opponent_answer[5u32].speed into r283;
    add r242 1u64 into r284;
    add r243 1u64 into r285;
    ternary r283 r284 r242 into r286;
    ternary r283 r243 r285 into r287;
    gt r255.attack 127u8 into r288;
    lt r267.defense 127u8 into r289;
    lt r279.goalkeeping 127u8 into r290;
    lt r1.answer[5u32].speed r0.opponent_answer[5u32].speed into r291;
    add r242 1u64 into r292;
    add r243 1u64 into r293;
    ternary r291 r292 r242 into r294;
    ternary r291 r243 r293 into r295;
    ternary r290 r294 r242 into r296;
    ternary r290 r295 r243 into r297;
    ternary r289 r296 r242 into r298;
    ternary r289 r297 r243 into r299;
    ternary r288 r298 r242 into r300;
    ternary r288 r299 r243 into r301;
    ternary r282 r286 r300 into r302;
    ternary r282 r287 r301 into r303;
    gt r1.answer[6u32].speed r0.opponent_answer[6u32].speed into r304;
    ternary r304 r1.answer[6u32].player_id r0.opponent_answer[6u32].player_id into r305;
    ternary r304 r1.answer[6u32].team_id r0.opponent_answer[6u32].team_id into r306;
    ternary r304 r1.answer[6u32].goalkeeper r0.opponent_answer[6u32].goalkeeper into r307;
    ternary r304 r1.answer[6u32].attack r0.opponent_answer[6u32].attack into r308;
    ternary r304 r1.answer[6u32].defense r0.opponent_answer[6u32].defense into r309;
    ternary r304 r1.answer[6u32].speed r0.opponent_answer[6u32].speed into r310;
    ternary r304 r1.answer[6u32].power r0.opponent_answer[6u32].power into r311;
    ternary r304 r1.answer[6u32].stamina r0.opponent_answer[6u32].stamina into r312;
    ternary r304 r1.answer[6u32].technique r0.opponent_answer[6u32].technique into r313;
    ternary r304 r1.answer[6u32].goalkeeping r0.opponent_answer[6u32].goalkeeping into r314;
    cast r305 r306 r307 r308 r309 r310 r311 r312 r313 r314 into r315 as Player;
    gt r1.answer[6u32].speed r0.opponent_answer[6u32].speed into r316;
    ternary r316 r0.opponent_answer[6u32].player_id r1.answer[6u32].player_id into r317;
    ternary r316 r0.opponent_answer[6u32].team_id r1.answer[6u32].team_id into r318;
    ternary r316 r0.opponent_answer[6u32].goalkeeper r1.answer[6u32].goalkeeper into r319;
    ternary r316 r0.opponent_answer[6u32].attack r1.answer[6u32].attack into r320;
    ternary r316 r0.opponent_answer[6u32].defense r1.answer[6u32].defense into r321;
    ternary r316 r0.opponent_answer[6u32].speed r1.answer[6u32].speed into r322;
    ternary r316 r0.opponent_answer[6u32].power r1.answer[6u32].power into r323;
    ternary r316 r0.opponent_answer[6u32].stamina r1.answer[6u32].stamina into r324;
    ternary r316 r0.opponent_answer[6u32].technique r1.answer[6u32].technique into r325;
    ternary r316 r0.opponent_answer[6u32].goalkeeping r1.answer[6u32].goalkeeping into r326;
    cast r317 r318 r319 r320 r321 r322 r323 r324 r325 r326 into r327 as Player;
    gt r1.answer[6u32].speed r0.opponent_answer[6u32].speed into r328;
    ternary r328 r0.opponent_answer[0u32].player_id r1.answer[0u32].player_id into r329;
    ternary r328 r0.opponent_answer[0u32].team_id r1.answer[0u32].team_id into r330;
    ternary r328 r0.opponent_answer[0u32].goalkeeper r1.answer[0u32].goalkeeper into r331;
    ternary r328 r0.opponent_answer[0u32].attack r1.answer[0u32].attack into r332;
    ternary r328 r0.opponent_answer[0u32].defense r1.answer[0u32].defense into r333;
    ternary r328 r0.opponent_answer[0u32].speed r1.answer[0u32].speed into r334;
    ternary r328 r0.opponent_answer[0u32].power r1.answer[0u32].power into r335;
    ternary r328 r0.opponent_answer[0u32].stamina r1.answer[0u32].stamina into r336;
    ternary r328 r0.opponent_answer[0u32].technique r1.answer[0u32].technique into r337;
    ternary r328 r0.opponent_answer[0u32].goalkeeping r1.answer[0u32].goalkeeping into r338;
    cast r329 r330 r331 r332 r333 r334 r335 r336 r337 r338 into r339 as Player;
    is.eq 6u8 10u8 into r340;
    is.eq r303 r302 into r341;
    and r340 r341 into r342;
    lt r1.answer[6u32].speed r0.opponent_answer[6u32].speed into r343;
    add r302 1u64 into r344;
    add r303 1u64 into r345;
    ternary r343 r344 r302 into r346;
    ternary r343 r303 r345 into r347;
    gt r315.attack 127u8 into r348;
    lt r327.defense 127u8 into r349;
    lt r339.goalkeeping 127u8 into r350;
    lt r1.answer[6u32].speed r0.opponent_answer[6u32].speed into r351;
    add r302 1u64 into r352;
    add r303 1u64 into r353;
    ternary r351 r352 r302 into r354;
    ternary r351 r303 r353 into r355;
    ternary r350 r354 r302 into r356;
    ternary r350 r355 r303 into r357;
    ternary r349 r356 r302 into r358;
    ternary r349 r357 r303 into r359;
    ternary r348 r358 r302 into r360;
    ternary r348 r359 r303 into r361;
    ternary r342 r346 r360 into r362;
    ternary r342 r347 r361 into r363;
    gt r1.answer[7u32].speed r0.opponent_answer[7u32].speed into r364;
    ternary r364 r1.answer[7u32].player_id r0.opponent_answer[7u32].player_id into r365;
    ternary r364 r1.answer[7u32].team_id r0.opponent_answer[7u32].team_id into r366;
    ternary r364 r1.answer[7u32].goalkeeper r0.opponent_answer[7u32].goalkeeper into r367;
    ternary r364 r1.answer[7u32].attack r0.opponent_answer[7u32].attack into r368;
    ternary r364 r1.answer[7u32].defense r0.opponent_answer[7u32].defense into r369;
    ternary r364 r1.answer[7u32].speed r0.opponent_answer[7u32].speed into r370;
    ternary r364 r1.answer[7u32].power r0.opponent_answer[7u32].power into r371;
    ternary r364 r1.answer[7u32].stamina r0.opponent_answer[7u32].stamina into r372;
    ternary r364 r1.answer[7u32].technique r0.opponent_answer[7u32].technique into r373;
    ternary r364 r1.answer[7u32].goalkeeping r0.opponent_answer[7u32].goalkeeping into r374;
    cast r365 r366 r367 r368 r369 r370 r371 r372 r373 r374 into r375 as Player;
    gt r1.answer[7u32].speed r0.opponent_answer[7u32].speed into r376;
    ternary r376 r0.opponent_answer[7u32].player_id r1.answer[7u32].player_id into r377;
    ternary r376 r0.opponent_answer[7u32].team_id r1.answer[7u32].team_id into r378;
    ternary r376 r0.opponent_answer[7u32].goalkeeper r1.answer[7u32].goalkeeper into r379;
    ternary r376 r0.opponent_answer[7u32].attack r1.answer[7u32].attack into r380;
    ternary r376 r0.opponent_answer[7u32].defense r1.answer[7u32].defense into r381;
    ternary r376 r0.opponent_answer[7u32].speed r1.answer[7u32].speed into r382;
    ternary r376 r0.opponent_answer[7u32].power r1.answer[7u32].power into r383;
    ternary r376 r0.opponent_answer[7u32].stamina r1.answer[7u32].stamina into r384;
    ternary r376 r0.opponent_answer[7u32].technique r1.answer[7u32].technique into r385;
    ternary r376 r0.opponent_answer[7u32].goalkeeping r1.answer[7u32].goalkeeping into r386;
    cast r377 r378 r379 r380 r381 r382 r383 r384 r385 r386 into r387 as Player;
    gt r1.answer[7u32].speed r0.opponent_answer[7u32].speed into r388;
    ternary r388 r0.opponent_answer[0u32].player_id r1.answer[0u32].player_id into r389;
    ternary r388 r0.opponent_answer[0u32].team_id r1.answer[0u32].team_id into r390;
    ternary r388 r0.opponent_answer[0u32].goalkeeper r1.answer[0u32].goalkeeper into r391;
    ternary r388 r0.opponent_answer[0u32].attack r1.answer[0u32].attack into r392;
    ternary r388 r0.opponent_answer[0u32].defense r1.answer[0u32].defense into r393;
    ternary r388 r0.opponent_answer[0u32].speed r1.answer[0u32].speed into r394;
    ternary r388 r0.opponent_answer[0u32].power r1.answer[0u32].power into r395;
    ternary r388 r0.opponent_answer[0u32].stamina r1.answer[0u32].stamina into r396;
    ternary r388 r0.opponent_answer[0u32].technique r1.answer[0u32].technique into r397;
    ternary r388 r0.opponent_answer[0u32].goalkeeping r1.answer[0u32].goalkeeping into r398;
    cast r389 r390 r391 r392 r393 r394 r395 r396 r397 r398 into r399 as Player;
    is.eq 7u8 10u8 into r400;
    is.eq r363 r362 into r401;
    and r400 r401 into r402;
    lt r1.answer[7u32].speed r0.opponent_answer[7u32].speed into r403;
    add r362 1u64 into r404;
    add r363 1u64 into r405;
    ternary r403 r404 r362 into r406;
    ternary r403 r363 r405 into r407;
    gt r375.attack 127u8 into r408;
    lt r387.defense 127u8 into r409;
    lt r399.goalkeeping 127u8 into r410;
    lt r1.answer[7u32].speed r0.opponent_answer[7u32].speed into r411;
    add r362 1u64 into r412;
    add r363 1u64 into r413;
    ternary r411 r412 r362 into r414;
    ternary r411 r363 r413 into r415;
    ternary r410 r414 r362 into r416;
    ternary r410 r415 r363 into r417;
    ternary r409 r416 r362 into r418;
    ternary r409 r417 r363 into r419;
    ternary r408 r418 r362 into r420;
    ternary r408 r419 r363 into r421;
    ternary r402 r406 r420 into r422;
    ternary r402 r407 r421 into r423;
    gt r1.answer[8u32].speed r0.opponent_answer[8u32].speed into r424;
    ternary r424 r1.answer[8u32].player_id r0.opponent_answer[8u32].player_id into r425;
    ternary r424 r1.answer[8u32].team_id r0.opponent_answer[8u32].team_id into r426;
    ternary r424 r1.answer[8u32].goalkeeper r0.opponent_answer[8u32].goalkeeper into r427;
    ternary r424 r1.answer[8u32].attack r0.opponent_answer[8u32].attack into r428;
    ternary r424 r1.answer[8u32].defense r0.opponent_answer[8u32].defense into r429;
    ternary r424 r1.answer[8u32].speed r0.opponent_answer[8u32].speed into r430;
    ternary r424 r1.answer[8u32].power r0.opponent_answer[8u32].power into r431;
    ternary r424 r1.answer[8u32].stamina r0.opponent_answer[8u32].stamina into r432;
    ternary r424 r1.answer[8u32].technique r0.opponent_answer[8u32].technique into r433;
    ternary r424 r1.answer[8u32].goalkeeping r0.opponent_answer[8u32].goalkeeping into r434;
    cast r425 r426 r427 r428 r429 r430 r431 r432 r433 r434 into r435 as Player;
    gt r1.answer[8u32].speed r0.opponent_answer[8u32].speed into r436;
    ternary r436 r0.opponent_answer[8u32].player_id r1.answer[8u32].player_id into r437;
    ternary r436 r0.opponent_answer[8u32].team_id r1.answer[8u32].team_id into r438;
    ternary r436 r0.opponent_answer[8u32].goalkeeper r1.answer[8u32].goalkeeper into r439;
    ternary r436 r0.opponent_answer[8u32].attack r1.answer[8u32].attack into r440;
    ternary r436 r0.opponent_answer[8u32].defense r1.answer[8u32].defense into r441;
    ternary r436 r0.opponent_answer[8u32].speed r1.answer[8u32].speed into r442;
    ternary r436 r0.opponent_answer[8u32].power r1.answer[8u32].power into r443;
    ternary r436 r0.opponent_answer[8u32].stamina r1.answer[8u32].stamina into r444;
    ternary r436 r0.opponent_answer[8u32].technique r1.answer[8u32].technique into r445;
    ternary r436 r0.opponent_answer[8u32].goalkeeping r1.answer[8u32].goalkeeping into r446;
    cast r437 r438 r439 r440 r441 r442 r443 r444 r445 r446 into r447 as Player;
    gt r1.answer[8u32].speed r0.opponent_answer[8u32].speed into r448;
    ternary r448 r0.opponent_answer[0u32].player_id r1.answer[0u32].player_id into r449;
    ternary r448 r0.opponent_answer[0u32].team_id r1.answer[0u32].team_id into r450;
    ternary r448 r0.opponent_answer[0u32].goalkeeper r1.answer[0u32].goalkeeper into r451;
    ternary r448 r0.opponent_answer[0u32].attack r1.answer[0u32].attack into r452;
    ternary r448 r0.opponent_answer[0u32].defense r1.answer[0u32].defense into r453;
    ternary r448 r0.opponent_answer[0u32].speed r1.answer[0u32].speed into r454;
    ternary r448 r0.opponent_answer[0u32].power r1.answer[0u32].power into r455;
    ternary r448 r0.opponent_answer[0u32].stamina r1.answer[0u32].stamina into r456;
    ternary r448 r0.opponent_answer[0u32].technique r1.answer[0u32].technique into r457;
    ternary r448 r0.opponent_answer[0u32].goalkeeping r1.answer[0u32].goalkeeping into r458;
    cast r449 r450 r451 r452 r453 r454 r455 r456 r457 r458 into r459 as Player;
    is.eq 8u8 10u8 into r460;
    is.eq r423 r422 into r461;
    and r460 r461 into r462;
    lt r1.answer[8u32].speed r0.opponent_answer[8u32].speed into r463;
    add r422 1u64 into r464;
    add r423 1u64 into r465;
    ternary r463 r464 r422 into r466;
    ternary r463 r423 r465 into r467;
    gt r435.attack 127u8 into r468;
    lt r447.defense 127u8 into r469;
    lt r459.goalkeeping 127u8 into r470;
    lt r1.answer[8u32].speed r0.opponent_answer[8u32].speed into r471;
    add r422 1u64 into r472;
    add r423 1u64 into r473;
    ternary r471 r472 r422 into r474;
    ternary r471 r423 r473 into r475;
    ternary r470 r474 r422 into r476;
    ternary r470 r475 r423 into r477;
    ternary r469 r476 r422 into r478;
    ternary r469 r477 r423 into r479;
    ternary r468 r478 r422 into r480;
    ternary r468 r479 r423 into r481;
    ternary r462 r466 r480 into r482;
    ternary r462 r467 r481 into r483;
    gt r1.answer[9u32].speed r0.opponent_answer[9u32].speed into r484;
    ternary r484 r1.answer[9u32].player_id r0.opponent_answer[9u32].player_id into r485;
    ternary r484 r1.answer[9u32].team_id r0.opponent_answer[9u32].team_id into r486;
    ternary r484 r1.answer[9u32].goalkeeper r0.opponent_answer[9u32].goalkeeper into r487;
    ternary r484 r1.answer[9u32].attack r0.opponent_answer[9u32].attack into r488;
    ternary r484 r1.answer[9u32].defense r0.opponent_answer[9u32].defense into r489;
    ternary r484 r1.answer[9u32].speed r0.opponent_answer[9u32].speed into r490;
    ternary r484 r1.answer[9u32].power r0.opponent_answer[9u32].power into r491;
    ternary r484 r1.answer[9u32].stamina r0.opponent_answer[9u32].stamina into r492;
    ternary r484 r1.answer[9u32].technique r0.opponent_answer[9u32].technique into r493;
    ternary r484 r1.answer[9u32].goalkeeping r0.opponent_answer[9u32].goalkeeping into r494;
    cast r485 r486 r487 r488 r489 r490 r491 r492 r493 r494 into r495 as Player;
    gt r1.answer[9u32].speed r0.opponent_answer[9u32].speed into r496;
    ternary r496 r0.opponent_answer[9u32].player_id r1.answer[9u32].player_id into r497;
    ternary r496 r0.opponent_answer[9u32].team_id r1.answer[9u32].team_id into r498;
    ternary r496 r0.opponent_answer[9u32].goalkeeper r1.answer[9u32].goalkeeper into r499;
    ternary r496 r0.opponent_answer[9u32].attack r1.answer[9u32].attack into r500;
    ternary r496 r0.opponent_answer[9u32].defense r1.answer[9u32].defense into r501;
    ternary r496 r0.opponent_answer[9u32].speed r1.answer[9u32].speed into r502;
    ternary r496 r0.opponent_answer[9u32].power r1.answer[9u32].power into r503;
    ternary r496 r0.opponent_answer[9u32].stamina r1.answer[9u32].stamina into r504;
    ternary r496 r0.opponent_answer[9u32].technique r1.answer[9u32].technique into r505;
    ternary r496 r0.opponent_answer[9u32].goalkeeping r1.answer[9u32].goalkeeping into r506;
    cast r497 r498 r499 r500 r501 r502 r503 r504 r505 r506 into r507 as Player;
    gt r1.answer[9u32].speed r0.opponent_answer[9u32].speed into r508;
    ternary r508 r0.opponent_answer[0u32].player_id r1.answer[0u32].player_id into r509;
    ternary r508 r0.opponent_answer[0u32].team_id r1.answer[0u32].team_id into r510;
    ternary r508 r0.opponent_answer[0u32].goalkeeper r1.answer[0u32].goalkeeper into r511;
    ternary r508 r0.opponent_answer[0u32].attack r1.answer[0u32].attack into r512;
    ternary r508 r0.opponent_answer[0u32].defense r1.answer[0u32].defense into r513;
    ternary r508 r0.opponent_answer[0u32].speed r1.answer[0u32].speed into r514;
    ternary r508 r0.opponent_answer[0u32].power r1.answer[0u32].power into r515;
    ternary r508 r0.opponent_answer[0u32].stamina r1.answer[0u32].stamina into r516;
    ternary r508 r0.opponent_answer[0u32].technique r1.answer[0u32].technique into r517;
    ternary r508 r0.opponent_answer[0u32].goalkeeping r1.answer[0u32].goalkeeping into r518;
    cast r509 r510 r511 r512 r513 r514 r515 r516 r517 r518 into r519 as Player;
    is.eq 9u8 10u8 into r520;
    is.eq r483 r482 into r521;
    and r520 r521 into r522;
    lt r1.answer[9u32].speed r0.opponent_answer[9u32].speed into r523;
    add r482 1u64 into r524;
    add r483 1u64 into r525;
    ternary r523 r524 r482 into r526;
    ternary r523 r483 r525 into r527;
    gt r495.attack 127u8 into r528;
    lt r507.defense 127u8 into r529;
    lt r519.goalkeeping 127u8 into r530;
    lt r1.answer[9u32].speed r0.opponent_answer[9u32].speed into r531;
    add r482 1u64 into r532;
    add r483 1u64 into r533;
    ternary r531 r532 r482 into r534;
    ternary r531 r483 r533 into r535;
    ternary r530 r534 r482 into r536;
    ternary r530 r535 r483 into r537;
    ternary r529 r536 r482 into r538;
    ternary r529 r537 r483 into r539;
    ternary r528 r538 r482 into r540;
    ternary r528 r539 r483 into r541;
    ternary r522 r526 r540 into r542;
    ternary r522 r527 r541 into r543;
    gt r1.answer[10u32].speed r0.opponent_answer[10u32].speed into r544;
    ternary r544 r1.answer[10u32].player_id r0.opponent_answer[10u32].player_id into r545;
    ternary r544 r1.answer[10u32].team_id r0.opponent_answer[10u32].team_id into r546;
    ternary r544 r1.answer[10u32].goalkeeper r0.opponent_answer[10u32].goalkeeper into r547;
    ternary r544 r1.answer[10u32].attack r0.opponent_answer[10u32].attack into r548;
    ternary r544 r1.answer[10u32].defense r0.opponent_answer[10u32].defense into r549;
    ternary r544 r1.answer[10u32].speed r0.opponent_answer[10u32].speed into r550;
    ternary r544 r1.answer[10u32].power r0.opponent_answer[10u32].power into r551;
    ternary r544 r1.answer[10u32].stamina r0.opponent_answer[10u32].stamina into r552;
    ternary r544 r1.answer[10u32].technique r0.opponent_answer[10u32].technique into r553;
    ternary r544 r1.answer[10u32].goalkeeping r0.opponent_answer[10u32].goalkeeping into r554;
    cast r545 r546 r547 r548 r549 r550 r551 r552 r553 r554 into r555 as Player;
    gt r1.answer[10u32].speed r0.opponent_answer[10u32].speed into r556;
    ternary r556 r0.opponent_answer[10u32].player_id r1.answer[10u32].player_id into r557;
    ternary r556 r0.opponent_answer[10u32].team_id r1.answer[10u32].team_id into r558;
    ternary r556 r0.opponent_answer[10u32].goalkeeper r1.answer[10u32].goalkeeper into r559;
    ternary r556 r0.opponent_answer[10u32].attack r1.answer[10u32].attack into r560;
    ternary r556 r0.opponent_answer[10u32].defense r1.answer[10u32].defense into r561;
    ternary r556 r0.opponent_answer[10u32].speed r1.answer[10u32].speed into r562;
    ternary r556 r0.opponent_answer[10u32].power r1.answer[10u32].power into r563;
    ternary r556 r0.opponent_answer[10u32].stamina r1.answer[10u32].stamina into r564;
    ternary r556 r0.opponent_answer[10u32].technique r1.answer[10u32].technique into r565;
    ternary r556 r0.opponent_answer[10u32].goalkeeping r1.answer[10u32].goalkeeping into r566;
    cast r557 r558 r559 r560 r561 r562 r563 r564 r565 r566 into r567 as Player;
    gt r1.answer[10u32].speed r0.opponent_answer[10u32].speed into r568;
    ternary r568 r0.opponent_answer[0u32].player_id r1.answer[0u32].player_id into r569;
    ternary r568 r0.opponent_answer[0u32].team_id r1.answer[0u32].team_id into r570;
    ternary r568 r0.opponent_answer[0u32].goalkeeper r1.answer[0u32].goalkeeper into r571;
    ternary r568 r0.opponent_answer[0u32].attack r1.answer[0u32].attack into r572;
    ternary r568 r0.opponent_answer[0u32].defense r1.answer[0u32].defense into r573;
    ternary r568 r0.opponent_answer[0u32].speed r1.answer[0u32].speed into r574;
    ternary r568 r0.opponent_answer[0u32].power r1.answer[0u32].power into r575;
    ternary r568 r0.opponent_answer[0u32].stamina r1.answer[0u32].stamina into r576;
    ternary r568 r0.opponent_answer[0u32].technique r1.answer[0u32].technique into r577;
    ternary r568 r0.opponent_answer[0u32].goalkeeping r1.answer[0u32].goalkeeping into r578;
    cast r569 r570 r571 r572 r573 r574 r575 r576 r577 r578 into r579 as Player;
    is.eq 10u8 10u8 into r580;
    is.eq r543 r542 into r581;
    and r580 r581 into r582;
    lt r1.answer[10u32].speed r0.opponent_answer[10u32].speed into r583;
    add r542 1u64 into r584;
    add r543 1u64 into r585;
    ternary r583 r584 r542 into r586;
    ternary r583 r543 r585 into r587;
    gt r555.attack 127u8 into r588;
    lt r567.defense 127u8 into r589;
    lt r579.goalkeeping 127u8 into r590;
    lt r1.answer[10u32].speed r0.opponent_answer[10u32].speed into r591;
    add r542 1u64 into r592;
    add r543 1u64 into r593;
    ternary r591 r592 r542 into r594;
    ternary r591 r543 r593 into r595;
    ternary r590 r594 r542 into r596;
    ternary r590 r595 r543 into r597;
    ternary r589 r596 r542 into r598;
    ternary r589 r597 r543 into r599;
    ternary r588 r598 r542 into r600;
    ternary r588 r599 r543 into r601;
    ternary r582 r586 r600 into r602;
    ternary r582 r587 r601 into r603;
    gt r603 r602 into r604;
    ternary r604 r1.challenger_address r1.opponent_address into r605;
    gt r603 r602 into r606;
    ternary r606 r1.opponent_address r1.challenger_address into r607;
    assert.eq r1.owner r1.challenger_address;
    cast r1.message_1 r1.message_2 r1.message_3 r1.message_4 r1.message_5 into r608 as Mssage;
    sign.verify r3.sig r1.challenger_address r608 into r609;
    assert.eq true r609;
    cast r1.game_multisig r1.challenger_address r1.opponent_address r1.game_multisig r1.amount r1.nonce r1.answer r3.sig 3u32 into r610 as RevealAnswer.record;
    cast aleo16hf8hfpwasnn9cf7k2c0dllc56nn7qt547qxgvgwu6pznw4trvqsx68kls r1.challenger_address r1.opponent_address r1.game_multisig r1.amount r1.nonce r1.answer r3.sig 4u32 into r611 as AuditRevealAnswer.record;
    call puzzle_pieces_v015.aleo/joint_stake_state_update r2 r3 r605 into r612 r613;
    cast r1.opponent_address r1.game_multisig 4field true r2.amount r1.challenger_address r1.opponent_address r1.answer r0.opponent_answer r605 r607 r603 r602 9u32 into r614 as GameFinishReqNotification.record;
    cast r1.challenger_address r1.game_multisig 4field true r2.amount r1.challenger_address r1.opponent_address r1.answer r0.opponent_answer r605 r607 r603 r602 9u32 into r615 as GameFinishReqNotification.record;
    output r610 as RevealAnswer.record;
    output r611 as AuditRevealAnswer.record;
    output r612 as puzzle_pieces_v015.aleo/JointPieceWinner.record;
    output r613 as puzzle_pieces_v015.aleo/AuditJointPieceWinner.record;
    output r614 as GameFinishReqNotification.record;
    output r615 as GameFinishReqNotification.record;


function finish_game:
    input r0 as Game.record;
    input r1 as puzzle_pieces_v015.aleo/JointPieceWinner.record;
    input r2 as puzzle_pieces_v015.aleo/PieceJointStake.record;
    input r3 as puzzle_pieces_v015.aleo/JointPieceTimeClaim.record;
    assert.eq r0.owner self.signer;
    assert.eq self.caller self.signer;
    is.eq r1.winner r0.challenger_address into r4;
    ternary r4 r0.opponent_address r0.challenger_address into r5;
    call puzzle_pieces_v015.aleo/joint_stake_transfer_to_winner r1 r2 r3 into r6 r7 r8;
    cast r0.owner r0.challenger_commit r0.opponent_answer r0.total_pot r0.challenger_address r0.opponent_address r0.game_multisig 3field 0u32 into r9 as Game.record;
    cast r0.challenger_address r0.game_multisig 5field false r0.total_pot r0.challenger_address r0.opponent_address r1.winner r5 10u32 into r10 as GameFinishedNotification.record;
    cast r0.opponent_address r0.game_multisig 5field false r0.total_pot r0.challenger_address r0.opponent_address r1.winner r5 10u32 into r11 as GameFinishedNotification.record;
    output r6 as puzzle_pieces_v015.aleo/Piece.record;
    output r7 as puzzle_pieces_v015.aleo/AuditTransferToWinner.record;
    output r8 as puzzle_pieces_v015.aleo/AuditPieceOwner.record;
    output r9 as Game.record;
    output r10 as GameFinishedNotification.record;
    output r11 as GameFinishedNotification.record;


function finish_game_by_timeout:
    input r0 as Game.record;
    input r1 as puzzle_pieces_v015.aleo/PieceJointStake.record;
    input r2 as puzzle_pieces_v015.aleo/JointPieceTimeClaim.record;
    input r3 as signature.private;
    assert.eq r0.owner self.signer;
    assert.eq self.caller self.signer;
    cast r0.owner r0.challenger_commit r0.opponent_answer r0.total_pot r0.challenger_address r0.opponent_address r0.game_multisig 3field 0u32 into r4 as Game.record;
    cast r0.challenger_address r0.game_multisig 6field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address r0.challenger_address 10u32 into r5 as GameFinishedNotification.record;
    cast r0.opponent_address r0.game_multisig 6field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address r0.challenger_address 10u32 into r6 as GameFinishedNotification.record;
    call puzzle_pieces_v015.aleo/joint_timeout_to_opponent r1 r2 r3 into r7 r8;
    async finish_game_by_timeout r2.block_ht into r9;
    output r7 as puzzle_pieces_v015.aleo/Piece.record;
    output r8 as puzzle_pieces_v015.aleo/AuditTransferToWinner.record;
    output r4 as Game.record;
    output r5 as GameFinishedNotification.record;
    output r6 as GameFinishedNotification.record;
    output r9 as football_game_v001.aleo/finish_game_by_timeout.future;

finalize finish_game_by_timeout:
    input r0 as u32.public;
    add r0 10000u32 into r1;
    gt block.height r1 into r2;
    assert.eq r2 true;
