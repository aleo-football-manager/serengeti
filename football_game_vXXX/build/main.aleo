import puzzle_pieces_v015.aleo;
program football_game_v001.aleo;


















struct Player:
    player_id as u8;
    team_id as u8;
    goalkeeper as boolean;
    attack as u8;
    defense as u8;
    speed as u8;
    power as u8;
    stamina as u8;
    technique as u8;
    goalkeeping as u8;

struct GameResult:
    goals_home as u64;
    goals_away as u64;

record Game:
    owner as address.private;
    challenger_commit as field.private;
    opponent_answer as [Player; 11u32].private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    game_multisig as address.private;
    game_state as field.private;
    ix as u32.private;

record GameReqNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record WaitingAcceptanceNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record StakeRenegedNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    renege_address as address.private;
    ix as u32.private;

record ChallengerWagerNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record OpponentWagerNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record WaitingRevealNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record RevealAnswerNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    opponent_answer as [Player; 11u32].private;
    ix as u32.private;

record GameFinishReqNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    challenger_answer as [Player; 11u32].private;
    opponent_answer as [Player; 11u32].private;
    winner as address.private;
    loser as address.private;
    ix as u32.private;

record GameFinishedNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    winner as address.private;
    loser as address.private;
    ix as u32.private;

struct Mssage:
    field_1 as field;
    field_2 as field;
    field_3 as field;
    field_4 as field;
    field_5 as field;

record Answer:
    owner as address.private;
    challenger_address as address.private;
    opponent_address as address.private;
    game_multisig as address.private;
    amount as u64.private;
    nonce as field.private;
    answer as [Player; 11u32].private;
    message_1 as field.private;
    message_2 as field.private;
    message_3 as field.private;
    message_4 as field.private;
    message_5 as field.private;
    ix as u32.private;

record AuditMintAnswer:
    owner as address.private;
    answer_owner as address.private;
    challenger_address as address.private;
    opponent_address as address.private;
    game_multisig as address.private;
    amount as u64.private;
    nonce as field.private;
    answer as [Player; 11u32].private;
    message_1 as field.private;
    message_2 as field.private;
    message_3 as field.private;
    message_4 as field.private;
    message_5 as field.private;
    ix as u32.private;

record RevealAnswer:
    owner as address.private;
    challenger_address as address.private;
    opponent_address as address.private;
    game_multisig as address.private;
    amount as u64.private;
    nonce as field.private;
    answer as [Player; 11u32].private;
    sig as signature.private;
    ix as u32.private;

record AuditRevealAnswer:
    owner as address.private;
    challenger_address as address.private;
    opponent_address as address.private;
    game_multisig as address.private;
    amount as u64.private;
    nonce as field.private;
    answer as [Player; 11u32].private;
    sig as signature.private;
    ix as u32.private;

record Key:
    owner as address.private;
    seed as field.private;
    amount as u64.private;
    challenger as address.private;
    opponent as address.private;
    game_multisig as address.private;
    ix as u32.private;

record AuditKey:
    owner as address.private;
    seed as field.private;
    amount as u64.private;
    challenger as address.private;
    opponent as address.private;
    game_multisig as address.private;
    ix as u32.private;


function main:
    input r0 as boolean.private;


function propose_game:
    input r0 as puzzle_pieces_v015.aleo/Piece.record;
    input r1 as u64.private;
    input r2 as address.private;
    input r3 as address.private;
    input r4 as address.private;
    input r5 as address.private;
    input r6 as field.private;
    input r7 as field.private;
    input r8 as field.private;
    input r9 as field.private;
    input r10 as field.private;
    input r11 as signature.private;
    input r12 as field.private;
    input r13 as [Player; 11u32].private;
    input r14 as field.private;
    assert.eq self.caller self.signer;
    assert.neq r5 r4;
    cast r12 into r15 as scalar;
    commit.bhp256 r13 r15 into r16 as field;
    gt r1 0u64 into r17;
    assert.eq r17 true;
    gte r0.amount r1 into r18;
    assert.eq r18 true;
    call puzzle_pieces_v015.aleo/stake_transfer_in r0 r2 r3 r4 r5 r1 r6 r7 r8 r9 r10 r11 into r19 r20 r21 r22 r23;
    cast r4 r14 r1 r3 r4 r5 5u32 into r24 as Key.record;
    cast aleo16hf8hfpwasnn9cf7k2c0dllc56nn7qt547qxgvgwu6pznw4trvqsx68kls r14 r1 r3 r4 r5 6u32 into r25 as AuditKey.record;
    add r1 r1 into r26;
    cast r4 r5 1field true r26 r3 r4 2u32 into r27 as GameReqNotification.record;
    add r1 r1 into r28;
    cast r3 r5 1field false r28 r3 r4 3u32 into r29 as WaitingAcceptanceNotification.record;
    cast 0u8 0u8 false 0u8 0u8 0u8 0u8 0u8 0u8 0u8 into r30 as Player;
    cast r30r30r30r30r30r30r30r30r30r30r30 into r31 as [Player; 11u32];
    add r1 r1 into r32;
    cast r5 r16 r31 r32 r3 r4 r5 1field 1u32 into r33 as Game.record;
    cast r6 r7 r8 r9 r10 into r34 as Mssage;
    sign.verify r11 r3 r34 into r35;
    assert.eq true r35;
    cast r3 r3 r4 r5 r1 r12 r13 r6 r7 r8 r9 r10 1u32 into r36 as Answer.record;
    cast aleo16hf8hfpwasnn9cf7k2c0dllc56nn7qt547qxgvgwu6pznw4trvqsx68kls r3 r3 r4 r5 r1 r12 r13 r6 r7 r8 r9 r10 2u32 into r37 as AuditMintAnswer.record;
    output r19 as puzzle_pieces_v015.aleo/PieceClaim.record;
    output r20 as puzzle_pieces_v015.aleo/PieceStake.record;
    output r21 as puzzle_pieces_v015.aleo/ClaimSignature.record;
    output r22 as puzzle_pieces_v015.aleo/Piece.record;
    output r23 as puzzle_pieces_v015.aleo/AuditStakeIn.record;
    output r36 as Answer.record;
    output r37 as AuditMintAnswer.record;
    output r24 as Key.record;
    output r25 as AuditKey.record;
    output r33 as Game.record;
    output r27 as GameReqNotification.record;
    output r29 as WaitingAcceptanceNotification.record;


function challenger_renege_stake:
    input r0 as WaitingAcceptanceNotification.record;
    input r1 as puzzle_pieces_v015.aleo/PieceStake.record;
    input r2 as puzzle_pieces_v015.aleo/PieceClaim.record;
    input r3 as signature.private;
    assert.eq self.caller self.signer;
    call puzzle_pieces_v015.aleo/stake_transfer_out r1 r2 r3 into r4 r5;
    cast r0.challenger_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.challenger_address 4u32 into r6 as StakeRenegedNotification.record;
    cast r0.opponent_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.challenger_address 4u32 into r7 as StakeRenegedNotification.record;
    output r4 as puzzle_pieces_v015.aleo/Piece.record;
    output r5 as puzzle_pieces_v015.aleo/AuditStakeOut.record;
    output r6 as StakeRenegedNotification.record;
    output r7 as StakeRenegedNotification.record;


function submit_wager:
    input r0 as puzzle_pieces_v015.aleo/Piece.record;
    input r1 as Key.record;
    input r2 as GameReqNotification.record;
    input r3 as field.private;
    input r4 as field.private;
    input r5 as field.private;
    input r6 as field.private;
    input r7 as field.private;
    input r8 as signature.private;
    assert.eq self.caller self.signer;
    gt r0.amount 0u64 into r9;
    assert.eq r9 true;
    div r2.total_pot 2u64 into r10;
    gte r0.amount r10 into r11;
    assert.eq r11 true;
    div r2.total_pot 2u64 into r12;
    call puzzle_pieces_v015.aleo/stake_transfer_in r0 r2.opponent_address r2.challenger_address r2.opponent_address r2.game_multisig r12 r3 r4 r5 r6 r7 r8 into r13 r14 r15 r16 r17;
    cast r2.challenger_address r2.game_multisig 2field false r2.total_pot r2.challenger_address r2.opponent_address 5u32 into r18 as ChallengerWagerNotification.record;
    cast r2.opponent_address r2.game_multisig 2field true r2.total_pot r2.challenger_address r2.opponent_address 6u32 into r19 as OpponentWagerNotification.record;
    output r13 as puzzle_pieces_v015.aleo/PieceClaim.record;
    output r14 as puzzle_pieces_v015.aleo/PieceStake.record;
    output r15 as puzzle_pieces_v015.aleo/ClaimSignature.record;
    output r16 as puzzle_pieces_v015.aleo/Piece.record;
    output r17 as puzzle_pieces_v015.aleo/AuditStakeIn.record;
    output r18 as ChallengerWagerNotification.record;
    output r19 as OpponentWagerNotification.record;


function opponent_renege_stake:
    input r0 as WaitingAcceptanceNotification.record;
    input r1 as puzzle_pieces_v015.aleo/PieceStake.record;
    input r2 as puzzle_pieces_v015.aleo/PieceClaim.record;
    input r3 as signature.private;
    assert.eq self.caller self.signer;
    call puzzle_pieces_v015.aleo/stake_transfer_out r1 r2 r3 into r4 r5;
    cast r0.challenger_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address 4u32 into r6 as StakeRenegedNotification.record;
    cast r0.opponent_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address 4u32 into r7 as StakeRenegedNotification.record;
    output r4 as puzzle_pieces_v015.aleo/Piece.record;
    output r5 as puzzle_pieces_v015.aleo/AuditStakeOut.record;
    output r6 as StakeRenegedNotification.record;
    output r7 as StakeRenegedNotification.record;


function accept_game:
    input r0 as Game.record;
    input r1 as [Player; 11u32].private;
    input r2 as puzzle_pieces_v015.aleo/PieceStake.record;
    input r3 as puzzle_pieces_v015.aleo/PieceClaim.record;
    input r4 as puzzle_pieces_v015.aleo/PieceStake.record;
    input r5 as puzzle_pieces_v015.aleo/PieceClaim.record;
    input r6 as u32.private;
    assert.eq r0.owner self.signer;
    assert.eq self.caller self.signer;
    call puzzle_pieces_v015.aleo/transfer_stakes_to_joint r2 r3 r4 r5 r6 into r7 r8 r9 r10;
    cast r0.opponent_address r0.owner 3field false r0.total_pot r0.challenger_address r0.opponent_address 7u32 into r11 as WaitingRevealNotification.record;
    cast r0.challenger_address r0.owner 3field true r0.total_pot r0.challenger_address r0.opponent_address r1 8u32 into r12 as RevealAnswerNotification.record;
    cast r0.owner r0.challenger_commit r1 r0.total_pot r0.challenger_address r0.opponent_address r0.game_multisig 3field 1u32 into r13 as Game.record;
    async accept_game r6 into r14;
    output r7 as puzzle_pieces_v015.aleo/PieceJointStake.record;
    output r8 as puzzle_pieces_v015.aleo/JointPieceTimeClaim.record;
    output r9 as puzzle_pieces_v015.aleo/JointPieceState.record;
    output r10 as puzzle_pieces_v015.aleo/AuditJointStake.record;
    output r11 as WaitingRevealNotification.record;
    output r12 as RevealAnswerNotification.record;
    output r13 as Game.record;
    output r14 as football_game_v001.aleo/accept_game.future;

finalize accept_game:
    input r0 as u32.public;
    sub block.height 1000u32 into r1;
    gte r0 r1 into r2;
    assert.eq r2 true;
    add block.height 1000u32 into r3;
    lte r0 r3 into r4;
    assert.eq r4 true;


function reveal_answer_game:
    input r0 as RevealAnswerNotification.record;
    input r1 as Answer.record;
    input r2 as puzzle_pieces_v015.aleo/JointPieceState.record;
    input r3 as puzzle_pieces_v015.aleo/ClaimSignature.record;
    assert.eq r2.state_updater_address self.signer;
    assert.eq self.caller self.signer;
    lt r1.answer[1u32].speed r0.opponent_answer[1u32].speed into r4;
    ternary r4 r0.opponent_answer[1u32].player_id r1.answer[1u32].player_id into r5;
    ternary r4 r0.opponent_answer[1u32].team_id r1.answer[1u32].team_id into r6;
    ternary r4 r0.opponent_answer[1u32].goalkeeper r1.answer[1u32].goalkeeper into r7;
    ternary r4 r0.opponent_answer[1u32].attack r1.answer[1u32].attack into r8;
    ternary r4 r0.opponent_answer[1u32].defense r1.answer[1u32].defense into r9;
    ternary r4 r0.opponent_answer[1u32].speed r1.answer[1u32].speed into r10;
    ternary r4 r0.opponent_answer[1u32].power r1.answer[1u32].power into r11;
    ternary r4 r0.opponent_answer[1u32].stamina r1.answer[1u32].stamina into r12;
    ternary r4 r0.opponent_answer[1u32].technique r1.answer[1u32].technique into r13;
    ternary r4 r0.opponent_answer[1u32].goalkeeping r1.answer[1u32].goalkeeping into r14;
    cast r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 into r15 as Player;
    ternary r4 r1.answer[1u32].player_id r0.opponent_answer[1u32].player_id into r16;
    ternary r4 r1.answer[1u32].team_id r0.opponent_answer[1u32].team_id into r17;
    ternary r4 r1.answer[1u32].goalkeeper r0.opponent_answer[1u32].goalkeeper into r18;
    ternary r4 r1.answer[1u32].attack r0.opponent_answer[1u32].attack into r19;
    ternary r4 r1.answer[1u32].defense r0.opponent_answer[1u32].defense into r20;
    ternary r4 r1.answer[1u32].speed r0.opponent_answer[1u32].speed into r21;
    ternary r4 r1.answer[1u32].power r0.opponent_answer[1u32].power into r22;
    ternary r4 r1.answer[1u32].stamina r0.opponent_answer[1u32].stamina into r23;
    ternary r4 r1.answer[1u32].technique r0.opponent_answer[1u32].technique into r24;
    ternary r4 r1.answer[1u32].goalkeeping r0.opponent_answer[1u32].goalkeeping into r25;
    cast r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 into r26 as Player;
    ternary r4 r1.answer[0u32].player_id r0.opponent_answer[0u32].player_id into r27;
    ternary r4 r1.answer[0u32].team_id r0.opponent_answer[0u32].team_id into r28;
    ternary r4 r1.answer[0u32].goalkeeper r0.opponent_answer[0u32].goalkeeper into r29;
    ternary r4 r1.answer[0u32].attack r0.opponent_answer[0u32].attack into r30;
    ternary r4 r1.answer[0u32].defense r0.opponent_answer[0u32].defense into r31;
    ternary r4 r1.answer[0u32].speed r0.opponent_answer[0u32].speed into r32;
    ternary r4 r1.answer[0u32].power r0.opponent_answer[0u32].power into r33;
    ternary r4 r1.answer[0u32].stamina r0.opponent_answer[0u32].stamina into r34;
    ternary r4 r1.answer[0u32].technique r0.opponent_answer[0u32].technique into r35;
    ternary r4 r1.answer[0u32].goalkeeping r0.opponent_answer[0u32].goalkeeping into r36;
    cast r27 r28 r29 r30 r31 r32 r33 r34 r35 r36 into r37 as Player;
    gt r15.attack 127u8 into r38;
    lt r26.defense 127u8 into r39;
    lt r37.goalkeeping 127u8 into r40;
    lt r1.answer[1u32].speed r0.opponent_answer[1u32].speed into r41;
    add 0u64 1u64 into r42;
    add 0u64 1u64 into r43;
    ternary r41 r42 0u64 into r44;
    ternary r41 0u64 r43 into r45;
    ternary r40 r44 0u64 into r46;
    ternary r40 r45 0u64 into r47;
    ternary r39 r46 0u64 into r48;
    ternary r39 r47 0u64 into r49;
    ternary r38 r48 0u64 into r50;
    ternary r38 r49 0u64 into r51;
    lt r1.answer[2u32].speed r0.opponent_answer[2u32].speed into r52;
    ternary r52 r0.opponent_answer[2u32].player_id r1.answer[2u32].player_id into r53;
    ternary r52 r0.opponent_answer[2u32].team_id r1.answer[2u32].team_id into r54;
    ternary r52 r0.opponent_answer[2u32].goalkeeper r1.answer[2u32].goalkeeper into r55;
    ternary r52 r0.opponent_answer[2u32].attack r1.answer[2u32].attack into r56;
    ternary r52 r0.opponent_answer[2u32].defense r1.answer[2u32].defense into r57;
    ternary r52 r0.opponent_answer[2u32].speed r1.answer[2u32].speed into r58;
    ternary r52 r0.opponent_answer[2u32].power r1.answer[2u32].power into r59;
    ternary r52 r0.opponent_answer[2u32].stamina r1.answer[2u32].stamina into r60;
    ternary r52 r0.opponent_answer[2u32].technique r1.answer[2u32].technique into r61;
    ternary r52 r0.opponent_answer[2u32].goalkeeping r1.answer[2u32].goalkeeping into r62;
    cast r53 r54 r55 r56 r57 r58 r59 r60 r61 r62 into r63 as Player;
    ternary r52 r1.answer[2u32].player_id r0.opponent_answer[2u32].player_id into r64;
    ternary r52 r1.answer[2u32].team_id r0.opponent_answer[2u32].team_id into r65;
    ternary r52 r1.answer[2u32].goalkeeper r0.opponent_answer[2u32].goalkeeper into r66;
    ternary r52 r1.answer[2u32].attack r0.opponent_answer[2u32].attack into r67;
    ternary r52 r1.answer[2u32].defense r0.opponent_answer[2u32].defense into r68;
    ternary r52 r1.answer[2u32].speed r0.opponent_answer[2u32].speed into r69;
    ternary r52 r1.answer[2u32].power r0.opponent_answer[2u32].power into r70;
    ternary r52 r1.answer[2u32].stamina r0.opponent_answer[2u32].stamina into r71;
    ternary r52 r1.answer[2u32].technique r0.opponent_answer[2u32].technique into r72;
    ternary r52 r1.answer[2u32].goalkeeping r0.opponent_answer[2u32].goalkeeping into r73;
    cast r64 r65 r66 r67 r68 r69 r70 r71 r72 r73 into r74 as Player;
    ternary r52 r1.answer[0u32].player_id r0.opponent_answer[0u32].player_id into r75;
    ternary r52 r1.answer[0u32].team_id r0.opponent_answer[0u32].team_id into r76;
    ternary r52 r1.answer[0u32].goalkeeper r0.opponent_answer[0u32].goalkeeper into r77;
    ternary r52 r1.answer[0u32].attack r0.opponent_answer[0u32].attack into r78;
    ternary r52 r1.answer[0u32].defense r0.opponent_answer[0u32].defense into r79;
    ternary r52 r1.answer[0u32].speed r0.opponent_answer[0u32].speed into r80;
    ternary r52 r1.answer[0u32].power r0.opponent_answer[0u32].power into r81;
    ternary r52 r1.answer[0u32].stamina r0.opponent_answer[0u32].stamina into r82;
    ternary r52 r1.answer[0u32].technique r0.opponent_answer[0u32].technique into r83;
    ternary r52 r1.answer[0u32].goalkeeping r0.opponent_answer[0u32].goalkeeping into r84;
    cast r75 r76 r77 r78 r79 r80 r81 r82 r83 r84 into r85 as Player;
    gt r63.attack 127u8 into r86;
    lt r74.defense 127u8 into r87;
    lt r85.goalkeeping 127u8 into r88;
    lt r1.answer[2u32].speed r0.opponent_answer[2u32].speed into r89;
    add r50 1u64 into r90;
    add r51 1u64 into r91;
    ternary r89 r90 r50 into r92;
    ternary r89 r51 r91 into r93;
    ternary r88 r92 r50 into r94;
    ternary r88 r93 r51 into r95;
    ternary r87 r94 r50 into r96;
    ternary r87 r95 r51 into r97;
    ternary r86 r96 r50 into r98;
    ternary r86 r97 r51 into r99;
    lt r1.answer[3u32].speed r0.opponent_answer[3u32].speed into r100;
    ternary r100 r0.opponent_answer[3u32].player_id r1.answer[3u32].player_id into r101;
    ternary r100 r0.opponent_answer[3u32].team_id r1.answer[3u32].team_id into r102;
    ternary r100 r0.opponent_answer[3u32].goalkeeper r1.answer[3u32].goalkeeper into r103;
    ternary r100 r0.opponent_answer[3u32].attack r1.answer[3u32].attack into r104;
    ternary r100 r0.opponent_answer[3u32].defense r1.answer[3u32].defense into r105;
    ternary r100 r0.opponent_answer[3u32].speed r1.answer[3u32].speed into r106;
    ternary r100 r0.opponent_answer[3u32].power r1.answer[3u32].power into r107;
    ternary r100 r0.opponent_answer[3u32].stamina r1.answer[3u32].stamina into r108;
    ternary r100 r0.opponent_answer[3u32].technique r1.answer[3u32].technique into r109;
    ternary r100 r0.opponent_answer[3u32].goalkeeping r1.answer[3u32].goalkeeping into r110;
    cast r101 r102 r103 r104 r105 r106 r107 r108 r109 r110 into r111 as Player;
    ternary r100 r1.answer[3u32].player_id r0.opponent_answer[3u32].player_id into r112;
    ternary r100 r1.answer[3u32].team_id r0.opponent_answer[3u32].team_id into r113;
    ternary r100 r1.answer[3u32].goalkeeper r0.opponent_answer[3u32].goalkeeper into r114;
    ternary r100 r1.answer[3u32].attack r0.opponent_answer[3u32].attack into r115;
    ternary r100 r1.answer[3u32].defense r0.opponent_answer[3u32].defense into r116;
    ternary r100 r1.answer[3u32].speed r0.opponent_answer[3u32].speed into r117;
    ternary r100 r1.answer[3u32].power r0.opponent_answer[3u32].power into r118;
    ternary r100 r1.answer[3u32].stamina r0.opponent_answer[3u32].stamina into r119;
    ternary r100 r1.answer[3u32].technique r0.opponent_answer[3u32].technique into r120;
    ternary r100 r1.answer[3u32].goalkeeping r0.opponent_answer[3u32].goalkeeping into r121;
    cast r112 r113 r114 r115 r116 r117 r118 r119 r120 r121 into r122 as Player;
    ternary r100 r1.answer[0u32].player_id r0.opponent_answer[0u32].player_id into r123;
    ternary r100 r1.answer[0u32].team_id r0.opponent_answer[0u32].team_id into r124;
    ternary r100 r1.answer[0u32].goalkeeper r0.opponent_answer[0u32].goalkeeper into r125;
    ternary r100 r1.answer[0u32].attack r0.opponent_answer[0u32].attack into r126;
    ternary r100 r1.answer[0u32].defense r0.opponent_answer[0u32].defense into r127;
    ternary r100 r1.answer[0u32].speed r0.opponent_answer[0u32].speed into r128;
    ternary r100 r1.answer[0u32].power r0.opponent_answer[0u32].power into r129;
    ternary r100 r1.answer[0u32].stamina r0.opponent_answer[0u32].stamina into r130;
    ternary r100 r1.answer[0u32].technique r0.opponent_answer[0u32].technique into r131;
    ternary r100 r1.answer[0u32].goalkeeping r0.opponent_answer[0u32].goalkeeping into r132;
    cast r123 r124 r125 r126 r127 r128 r129 r130 r131 r132 into r133 as Player;
    gt r111.attack 127u8 into r134;
    lt r122.defense 127u8 into r135;
    lt r133.goalkeeping 127u8 into r136;
    lt r1.answer[3u32].speed r0.opponent_answer[3u32].speed into r137;
    add r98 1u64 into r138;
    add r99 1u64 into r139;
    ternary r137 r138 r98 into r140;
    ternary r137 r99 r139 into r141;
    ternary r136 r140 r98 into r142;
    ternary r136 r141 r99 into r143;
    ternary r135 r142 r98 into r144;
    ternary r135 r143 r99 into r145;
    ternary r134 r144 r98 into r146;
    ternary r134 r145 r99 into r147;
    lt r1.answer[4u32].speed r0.opponent_answer[4u32].speed into r148;
    ternary r148 r0.opponent_answer[4u32].player_id r1.answer[4u32].player_id into r149;
    ternary r148 r0.opponent_answer[4u32].team_id r1.answer[4u32].team_id into r150;
    ternary r148 r0.opponent_answer[4u32].goalkeeper r1.answer[4u32].goalkeeper into r151;
    ternary r148 r0.opponent_answer[4u32].attack r1.answer[4u32].attack into r152;
    ternary r148 r0.opponent_answer[4u32].defense r1.answer[4u32].defense into r153;
    ternary r148 r0.opponent_answer[4u32].speed r1.answer[4u32].speed into r154;
    ternary r148 r0.opponent_answer[4u32].power r1.answer[4u32].power into r155;
    ternary r148 r0.opponent_answer[4u32].stamina r1.answer[4u32].stamina into r156;
    ternary r148 r0.opponent_answer[4u32].technique r1.answer[4u32].technique into r157;
    ternary r148 r0.opponent_answer[4u32].goalkeeping r1.answer[4u32].goalkeeping into r158;
    cast r149 r150 r151 r152 r153 r154 r155 r156 r157 r158 into r159 as Player;
    ternary r148 r1.answer[4u32].player_id r0.opponent_answer[4u32].player_id into r160;
    ternary r148 r1.answer[4u32].team_id r0.opponent_answer[4u32].team_id into r161;
    ternary r148 r1.answer[4u32].goalkeeper r0.opponent_answer[4u32].goalkeeper into r162;
    ternary r148 r1.answer[4u32].attack r0.opponent_answer[4u32].attack into r163;
    ternary r148 r1.answer[4u32].defense r0.opponent_answer[4u32].defense into r164;
    ternary r148 r1.answer[4u32].speed r0.opponent_answer[4u32].speed into r165;
    ternary r148 r1.answer[4u32].power r0.opponent_answer[4u32].power into r166;
    ternary r148 r1.answer[4u32].stamina r0.opponent_answer[4u32].stamina into r167;
    ternary r148 r1.answer[4u32].technique r0.opponent_answer[4u32].technique into r168;
    ternary r148 r1.answer[4u32].goalkeeping r0.opponent_answer[4u32].goalkeeping into r169;
    cast r160 r161 r162 r163 r164 r165 r166 r167 r168 r169 into r170 as Player;
    ternary r148 r1.answer[0u32].player_id r0.opponent_answer[0u32].player_id into r171;
    ternary r148 r1.answer[0u32].team_id r0.opponent_answer[0u32].team_id into r172;
    ternary r148 r1.answer[0u32].goalkeeper r0.opponent_answer[0u32].goalkeeper into r173;
    ternary r148 r1.answer[0u32].attack r0.opponent_answer[0u32].attack into r174;
    ternary r148 r1.answer[0u32].defense r0.opponent_answer[0u32].defense into r175;
    ternary r148 r1.answer[0u32].speed r0.opponent_answer[0u32].speed into r176;
    ternary r148 r1.answer[0u32].power r0.opponent_answer[0u32].power into r177;
    ternary r148 r1.answer[0u32].stamina r0.opponent_answer[0u32].stamina into r178;
    ternary r148 r1.answer[0u32].technique r0.opponent_answer[0u32].technique into r179;
    ternary r148 r1.answer[0u32].goalkeeping r0.opponent_answer[0u32].goalkeeping into r180;
    cast r171 r172 r173 r174 r175 r176 r177 r178 r179 r180 into r181 as Player;
    gt r159.attack 127u8 into r182;
    lt r170.defense 127u8 into r183;
    lt r181.goalkeeping 127u8 into r184;
    lt r1.answer[4u32].speed r0.opponent_answer[4u32].speed into r185;
    add r146 1u64 into r186;
    add r147 1u64 into r187;
    ternary r185 r186 r146 into r188;
    ternary r185 r147 r187 into r189;
    ternary r184 r188 r146 into r190;
    ternary r184 r189 r147 into r191;
    ternary r183 r190 r146 into r192;
    ternary r183 r191 r147 into r193;
    ternary r182 r192 r146 into r194;
    ternary r182 r193 r147 into r195;
    lt r1.answer[5u32].speed r0.opponent_answer[5u32].speed into r196;
    ternary r196 r0.opponent_answer[5u32].player_id r1.answer[5u32].player_id into r197;
    ternary r196 r0.opponent_answer[5u32].team_id r1.answer[5u32].team_id into r198;
    ternary r196 r0.opponent_answer[5u32].goalkeeper r1.answer[5u32].goalkeeper into r199;
    ternary r196 r0.opponent_answer[5u32].attack r1.answer[5u32].attack into r200;
    ternary r196 r0.opponent_answer[5u32].defense r1.answer[5u32].defense into r201;
    ternary r196 r0.opponent_answer[5u32].speed r1.answer[5u32].speed into r202;
    ternary r196 r0.opponent_answer[5u32].power r1.answer[5u32].power into r203;
    ternary r196 r0.opponent_answer[5u32].stamina r1.answer[5u32].stamina into r204;
    ternary r196 r0.opponent_answer[5u32].technique r1.answer[5u32].technique into r205;
    ternary r196 r0.opponent_answer[5u32].goalkeeping r1.answer[5u32].goalkeeping into r206;
    cast r197 r198 r199 r200 r201 r202 r203 r204 r205 r206 into r207 as Player;
    ternary r196 r1.answer[5u32].player_id r0.opponent_answer[5u32].player_id into r208;
    ternary r196 r1.answer[5u32].team_id r0.opponent_answer[5u32].team_id into r209;
    ternary r196 r1.answer[5u32].goalkeeper r0.opponent_answer[5u32].goalkeeper into r210;
    ternary r196 r1.answer[5u32].attack r0.opponent_answer[5u32].attack into r211;
    ternary r196 r1.answer[5u32].defense r0.opponent_answer[5u32].defense into r212;
    ternary r196 r1.answer[5u32].speed r0.opponent_answer[5u32].speed into r213;
    ternary r196 r1.answer[5u32].power r0.opponent_answer[5u32].power into r214;
    ternary r196 r1.answer[5u32].stamina r0.opponent_answer[5u32].stamina into r215;
    ternary r196 r1.answer[5u32].technique r0.opponent_answer[5u32].technique into r216;
    ternary r196 r1.answer[5u32].goalkeeping r0.opponent_answer[5u32].goalkeeping into r217;
    cast r208 r209 r210 r211 r212 r213 r214 r215 r216 r217 into r218 as Player;
    ternary r196 r1.answer[0u32].player_id r0.opponent_answer[0u32].player_id into r219;
    ternary r196 r1.answer[0u32].team_id r0.opponent_answer[0u32].team_id into r220;
    ternary r196 r1.answer[0u32].goalkeeper r0.opponent_answer[0u32].goalkeeper into r221;
    ternary r196 r1.answer[0u32].attack r0.opponent_answer[0u32].attack into r222;
    ternary r196 r1.answer[0u32].defense r0.opponent_answer[0u32].defense into r223;
    ternary r196 r1.answer[0u32].speed r0.opponent_answer[0u32].speed into r224;
    ternary r196 r1.answer[0u32].power r0.opponent_answer[0u32].power into r225;
    ternary r196 r1.answer[0u32].stamina r0.opponent_answer[0u32].stamina into r226;
    ternary r196 r1.answer[0u32].technique r0.opponent_answer[0u32].technique into r227;
    ternary r196 r1.answer[0u32].goalkeeping r0.opponent_answer[0u32].goalkeeping into r228;
    cast r219 r220 r221 r222 r223 r224 r225 r226 r227 r228 into r229 as Player;
    gt r207.attack 127u8 into r230;
    lt r218.defense 127u8 into r231;
    lt r229.goalkeeping 127u8 into r232;
    lt r1.answer[5u32].speed r0.opponent_answer[5u32].speed into r233;
    add r194 1u64 into r234;
    add r195 1u64 into r235;
    ternary r233 r234 r194 into r236;
    ternary r233 r195 r235 into r237;
    ternary r232 r236 r194 into r238;
    ternary r232 r237 r195 into r239;
    ternary r231 r238 r194 into r240;
    ternary r231 r239 r195 into r241;
    ternary r230 r240 r194 into r242;
    ternary r230 r241 r195 into r243;
    lt r1.answer[6u32].speed r0.opponent_answer[6u32].speed into r244;
    ternary r244 r0.opponent_answer[6u32].player_id r1.answer[6u32].player_id into r245;
    ternary r244 r0.opponent_answer[6u32].team_id r1.answer[6u32].team_id into r246;
    ternary r244 r0.opponent_answer[6u32].goalkeeper r1.answer[6u32].goalkeeper into r247;
    ternary r244 r0.opponent_answer[6u32].attack r1.answer[6u32].attack into r248;
    ternary r244 r0.opponent_answer[6u32].defense r1.answer[6u32].defense into r249;
    ternary r244 r0.opponent_answer[6u32].speed r1.answer[6u32].speed into r250;
    ternary r244 r0.opponent_answer[6u32].power r1.answer[6u32].power into r251;
    ternary r244 r0.opponent_answer[6u32].stamina r1.answer[6u32].stamina into r252;
    ternary r244 r0.opponent_answer[6u32].technique r1.answer[6u32].technique into r253;
    ternary r244 r0.opponent_answer[6u32].goalkeeping r1.answer[6u32].goalkeeping into r254;
    cast r245 r246 r247 r248 r249 r250 r251 r252 r253 r254 into r255 as Player;
    ternary r244 r1.answer[6u32].player_id r0.opponent_answer[6u32].player_id into r256;
    ternary r244 r1.answer[6u32].team_id r0.opponent_answer[6u32].team_id into r257;
    ternary r244 r1.answer[6u32].goalkeeper r0.opponent_answer[6u32].goalkeeper into r258;
    ternary r244 r1.answer[6u32].attack r0.opponent_answer[6u32].attack into r259;
    ternary r244 r1.answer[6u32].defense r0.opponent_answer[6u32].defense into r260;
    ternary r244 r1.answer[6u32].speed r0.opponent_answer[6u32].speed into r261;
    ternary r244 r1.answer[6u32].power r0.opponent_answer[6u32].power into r262;
    ternary r244 r1.answer[6u32].stamina r0.opponent_answer[6u32].stamina into r263;
    ternary r244 r1.answer[6u32].technique r0.opponent_answer[6u32].technique into r264;
    ternary r244 r1.answer[6u32].goalkeeping r0.opponent_answer[6u32].goalkeeping into r265;
    cast r256 r257 r258 r259 r260 r261 r262 r263 r264 r265 into r266 as Player;
    ternary r244 r1.answer[0u32].player_id r0.opponent_answer[0u32].player_id into r267;
    ternary r244 r1.answer[0u32].team_id r0.opponent_answer[0u32].team_id into r268;
    ternary r244 r1.answer[0u32].goalkeeper r0.opponent_answer[0u32].goalkeeper into r269;
    ternary r244 r1.answer[0u32].attack r0.opponent_answer[0u32].attack into r270;
    ternary r244 r1.answer[0u32].defense r0.opponent_answer[0u32].defense into r271;
    ternary r244 r1.answer[0u32].speed r0.opponent_answer[0u32].speed into r272;
    ternary r244 r1.answer[0u32].power r0.opponent_answer[0u32].power into r273;
    ternary r244 r1.answer[0u32].stamina r0.opponent_answer[0u32].stamina into r274;
    ternary r244 r1.answer[0u32].technique r0.opponent_answer[0u32].technique into r275;
    ternary r244 r1.answer[0u32].goalkeeping r0.opponent_answer[0u32].goalkeeping into r276;
    cast r267 r268 r269 r270 r271 r272 r273 r274 r275 r276 into r277 as Player;
    gt r255.attack 127u8 into r278;
    lt r266.defense 127u8 into r279;
    lt r277.goalkeeping 127u8 into r280;
    lt r1.answer[6u32].speed r0.opponent_answer[6u32].speed into r281;
    add r242 1u64 into r282;
    add r243 1u64 into r283;
    ternary r281 r282 r242 into r284;
    ternary r281 r243 r283 into r285;
    ternary r280 r284 r242 into r286;
    ternary r280 r285 r243 into r287;
    ternary r279 r286 r242 into r288;
    ternary r279 r287 r243 into r289;
    ternary r278 r288 r242 into r290;
    ternary r278 r289 r243 into r291;
    lt r1.answer[7u32].speed r0.opponent_answer[7u32].speed into r292;
    ternary r292 r0.opponent_answer[7u32].player_id r1.answer[7u32].player_id into r293;
    ternary r292 r0.opponent_answer[7u32].team_id r1.answer[7u32].team_id into r294;
    ternary r292 r0.opponent_answer[7u32].goalkeeper r1.answer[7u32].goalkeeper into r295;
    ternary r292 r0.opponent_answer[7u32].attack r1.answer[7u32].attack into r296;
    ternary r292 r0.opponent_answer[7u32].defense r1.answer[7u32].defense into r297;
    ternary r292 r0.opponent_answer[7u32].speed r1.answer[7u32].speed into r298;
    ternary r292 r0.opponent_answer[7u32].power r1.answer[7u32].power into r299;
    ternary r292 r0.opponent_answer[7u32].stamina r1.answer[7u32].stamina into r300;
    ternary r292 r0.opponent_answer[7u32].technique r1.answer[7u32].technique into r301;
    ternary r292 r0.opponent_answer[7u32].goalkeeping r1.answer[7u32].goalkeeping into r302;
    cast r293 r294 r295 r296 r297 r298 r299 r300 r301 r302 into r303 as Player;
    ternary r292 r1.answer[7u32].player_id r0.opponent_answer[7u32].player_id into r304;
    ternary r292 r1.answer[7u32].team_id r0.opponent_answer[7u32].team_id into r305;
    ternary r292 r1.answer[7u32].goalkeeper r0.opponent_answer[7u32].goalkeeper into r306;
    ternary r292 r1.answer[7u32].attack r0.opponent_answer[7u32].attack into r307;
    ternary r292 r1.answer[7u32].defense r0.opponent_answer[7u32].defense into r308;
    ternary r292 r1.answer[7u32].speed r0.opponent_answer[7u32].speed into r309;
    ternary r292 r1.answer[7u32].power r0.opponent_answer[7u32].power into r310;
    ternary r292 r1.answer[7u32].stamina r0.opponent_answer[7u32].stamina into r311;
    ternary r292 r1.answer[7u32].technique r0.opponent_answer[7u32].technique into r312;
    ternary r292 r1.answer[7u32].goalkeeping r0.opponent_answer[7u32].goalkeeping into r313;
    cast r304 r305 r306 r307 r308 r309 r310 r311 r312 r313 into r314 as Player;
    ternary r292 r1.answer[0u32].player_id r0.opponent_answer[0u32].player_id into r315;
    ternary r292 r1.answer[0u32].team_id r0.opponent_answer[0u32].team_id into r316;
    ternary r292 r1.answer[0u32].goalkeeper r0.opponent_answer[0u32].goalkeeper into r317;
    ternary r292 r1.answer[0u32].attack r0.opponent_answer[0u32].attack into r318;
    ternary r292 r1.answer[0u32].defense r0.opponent_answer[0u32].defense into r319;
    ternary r292 r1.answer[0u32].speed r0.opponent_answer[0u32].speed into r320;
    ternary r292 r1.answer[0u32].power r0.opponent_answer[0u32].power into r321;
    ternary r292 r1.answer[0u32].stamina r0.opponent_answer[0u32].stamina into r322;
    ternary r292 r1.answer[0u32].technique r0.opponent_answer[0u32].technique into r323;
    ternary r292 r1.answer[0u32].goalkeeping r0.opponent_answer[0u32].goalkeeping into r324;
    cast r315 r316 r317 r318 r319 r320 r321 r322 r323 r324 into r325 as Player;
    gt r303.attack 127u8 into r326;
    lt r314.defense 127u8 into r327;
    lt r325.goalkeeping 127u8 into r328;
    lt r1.answer[7u32].speed r0.opponent_answer[7u32].speed into r329;
    add r290 1u64 into r330;
    add r291 1u64 into r331;
    ternary r329 r330 r290 into r332;
    ternary r329 r291 r331 into r333;
    ternary r328 r332 r290 into r334;
    ternary r328 r333 r291 into r335;
    ternary r327 r334 r290 into r336;
    ternary r327 r335 r291 into r337;
    ternary r326 r336 r290 into r338;
    ternary r326 r337 r291 into r339;
    lt r1.answer[8u32].speed r0.opponent_answer[8u32].speed into r340;
    ternary r340 r0.opponent_answer[8u32].player_id r1.answer[8u32].player_id into r341;
    ternary r340 r0.opponent_answer[8u32].team_id r1.answer[8u32].team_id into r342;
    ternary r340 r0.opponent_answer[8u32].goalkeeper r1.answer[8u32].goalkeeper into r343;
    ternary r340 r0.opponent_answer[8u32].attack r1.answer[8u32].attack into r344;
    ternary r340 r0.opponent_answer[8u32].defense r1.answer[8u32].defense into r345;
    ternary r340 r0.opponent_answer[8u32].speed r1.answer[8u32].speed into r346;
    ternary r340 r0.opponent_answer[8u32].power r1.answer[8u32].power into r347;
    ternary r340 r0.opponent_answer[8u32].stamina r1.answer[8u32].stamina into r348;
    ternary r340 r0.opponent_answer[8u32].technique r1.answer[8u32].technique into r349;
    ternary r340 r0.opponent_answer[8u32].goalkeeping r1.answer[8u32].goalkeeping into r350;
    cast r341 r342 r343 r344 r345 r346 r347 r348 r349 r350 into r351 as Player;
    ternary r340 r1.answer[8u32].player_id r0.opponent_answer[8u32].player_id into r352;
    ternary r340 r1.answer[8u32].team_id r0.opponent_answer[8u32].team_id into r353;
    ternary r340 r1.answer[8u32].goalkeeper r0.opponent_answer[8u32].goalkeeper into r354;
    ternary r340 r1.answer[8u32].attack r0.opponent_answer[8u32].attack into r355;
    ternary r340 r1.answer[8u32].defense r0.opponent_answer[8u32].defense into r356;
    ternary r340 r1.answer[8u32].speed r0.opponent_answer[8u32].speed into r357;
    ternary r340 r1.answer[8u32].power r0.opponent_answer[8u32].power into r358;
    ternary r340 r1.answer[8u32].stamina r0.opponent_answer[8u32].stamina into r359;
    ternary r340 r1.answer[8u32].technique r0.opponent_answer[8u32].technique into r360;
    ternary r340 r1.answer[8u32].goalkeeping r0.opponent_answer[8u32].goalkeeping into r361;
    cast r352 r353 r354 r355 r356 r357 r358 r359 r360 r361 into r362 as Player;
    ternary r340 r1.answer[0u32].player_id r0.opponent_answer[0u32].player_id into r363;
    ternary r340 r1.answer[0u32].team_id r0.opponent_answer[0u32].team_id into r364;
    ternary r340 r1.answer[0u32].goalkeeper r0.opponent_answer[0u32].goalkeeper into r365;
    ternary r340 r1.answer[0u32].attack r0.opponent_answer[0u32].attack into r366;
    ternary r340 r1.answer[0u32].defense r0.opponent_answer[0u32].defense into r367;
    ternary r340 r1.answer[0u32].speed r0.opponent_answer[0u32].speed into r368;
    ternary r340 r1.answer[0u32].power r0.opponent_answer[0u32].power into r369;
    ternary r340 r1.answer[0u32].stamina r0.opponent_answer[0u32].stamina into r370;
    ternary r340 r1.answer[0u32].technique r0.opponent_answer[0u32].technique into r371;
    ternary r340 r1.answer[0u32].goalkeeping r0.opponent_answer[0u32].goalkeeping into r372;
    cast r363 r364 r365 r366 r367 r368 r369 r370 r371 r372 into r373 as Player;
    gt r351.attack 127u8 into r374;
    lt r362.defense 127u8 into r375;
    lt r373.goalkeeping 127u8 into r376;
    lt r1.answer[8u32].speed r0.opponent_answer[8u32].speed into r377;
    add r338 1u64 into r378;
    add r339 1u64 into r379;
    ternary r377 r378 r338 into r380;
    ternary r377 r339 r379 into r381;
    ternary r376 r380 r338 into r382;
    ternary r376 r381 r339 into r383;
    ternary r375 r382 r338 into r384;
    ternary r375 r383 r339 into r385;
    ternary r374 r384 r338 into r386;
    ternary r374 r385 r339 into r387;
    lt r1.answer[9u32].speed r0.opponent_answer[9u32].speed into r388;
    ternary r388 r0.opponent_answer[9u32].player_id r1.answer[9u32].player_id into r389;
    ternary r388 r0.opponent_answer[9u32].team_id r1.answer[9u32].team_id into r390;
    ternary r388 r0.opponent_answer[9u32].goalkeeper r1.answer[9u32].goalkeeper into r391;
    ternary r388 r0.opponent_answer[9u32].attack r1.answer[9u32].attack into r392;
    ternary r388 r0.opponent_answer[9u32].defense r1.answer[9u32].defense into r393;
    ternary r388 r0.opponent_answer[9u32].speed r1.answer[9u32].speed into r394;
    ternary r388 r0.opponent_answer[9u32].power r1.answer[9u32].power into r395;
    ternary r388 r0.opponent_answer[9u32].stamina r1.answer[9u32].stamina into r396;
    ternary r388 r0.opponent_answer[9u32].technique r1.answer[9u32].technique into r397;
    ternary r388 r0.opponent_answer[9u32].goalkeeping r1.answer[9u32].goalkeeping into r398;
    cast r389 r390 r391 r392 r393 r394 r395 r396 r397 r398 into r399 as Player;
    ternary r388 r1.answer[9u32].player_id r0.opponent_answer[9u32].player_id into r400;
    ternary r388 r1.answer[9u32].team_id r0.opponent_answer[9u32].team_id into r401;
    ternary r388 r1.answer[9u32].goalkeeper r0.opponent_answer[9u32].goalkeeper into r402;
    ternary r388 r1.answer[9u32].attack r0.opponent_answer[9u32].attack into r403;
    ternary r388 r1.answer[9u32].defense r0.opponent_answer[9u32].defense into r404;
    ternary r388 r1.answer[9u32].speed r0.opponent_answer[9u32].speed into r405;
    ternary r388 r1.answer[9u32].power r0.opponent_answer[9u32].power into r406;
    ternary r388 r1.answer[9u32].stamina r0.opponent_answer[9u32].stamina into r407;
    ternary r388 r1.answer[9u32].technique r0.opponent_answer[9u32].technique into r408;
    ternary r388 r1.answer[9u32].goalkeeping r0.opponent_answer[9u32].goalkeeping into r409;
    cast r400 r401 r402 r403 r404 r405 r406 r407 r408 r409 into r410 as Player;
    ternary r388 r1.answer[0u32].player_id r0.opponent_answer[0u32].player_id into r411;
    ternary r388 r1.answer[0u32].team_id r0.opponent_answer[0u32].team_id into r412;
    ternary r388 r1.answer[0u32].goalkeeper r0.opponent_answer[0u32].goalkeeper into r413;
    ternary r388 r1.answer[0u32].attack r0.opponent_answer[0u32].attack into r414;
    ternary r388 r1.answer[0u32].defense r0.opponent_answer[0u32].defense into r415;
    ternary r388 r1.answer[0u32].speed r0.opponent_answer[0u32].speed into r416;
    ternary r388 r1.answer[0u32].power r0.opponent_answer[0u32].power into r417;
    ternary r388 r1.answer[0u32].stamina r0.opponent_answer[0u32].stamina into r418;
    ternary r388 r1.answer[0u32].technique r0.opponent_answer[0u32].technique into r419;
    ternary r388 r1.answer[0u32].goalkeeping r0.opponent_answer[0u32].goalkeeping into r420;
    cast r411 r412 r413 r414 r415 r416 r417 r418 r419 r420 into r421 as Player;
    gt r399.attack 127u8 into r422;
    lt r410.defense 127u8 into r423;
    lt r421.goalkeeping 127u8 into r424;
    lt r1.answer[9u32].speed r0.opponent_answer[9u32].speed into r425;
    add r386 1u64 into r426;
    add r387 1u64 into r427;
    ternary r425 r426 r386 into r428;
    ternary r425 r387 r427 into r429;
    ternary r424 r428 r386 into r430;
    ternary r424 r429 r387 into r431;
    ternary r423 r430 r386 into r432;
    ternary r423 r431 r387 into r433;
    ternary r422 r432 r386 into r434;
    ternary r422 r433 r387 into r435;
    lt r1.answer[10u32].speed r0.opponent_answer[10u32].speed into r436;
    ternary r436 r0.opponent_answer[10u32].player_id r1.answer[10u32].player_id into r437;
    ternary r436 r0.opponent_answer[10u32].team_id r1.answer[10u32].team_id into r438;
    ternary r436 r0.opponent_answer[10u32].goalkeeper r1.answer[10u32].goalkeeper into r439;
    ternary r436 r0.opponent_answer[10u32].attack r1.answer[10u32].attack into r440;
    ternary r436 r0.opponent_answer[10u32].defense r1.answer[10u32].defense into r441;
    ternary r436 r0.opponent_answer[10u32].speed r1.answer[10u32].speed into r442;
    ternary r436 r0.opponent_answer[10u32].power r1.answer[10u32].power into r443;
    ternary r436 r0.opponent_answer[10u32].stamina r1.answer[10u32].stamina into r444;
    ternary r436 r0.opponent_answer[10u32].technique r1.answer[10u32].technique into r445;
    ternary r436 r0.opponent_answer[10u32].goalkeeping r1.answer[10u32].goalkeeping into r446;
    cast r437 r438 r439 r440 r441 r442 r443 r444 r445 r446 into r447 as Player;
    ternary r436 r1.answer[10u32].player_id r0.opponent_answer[10u32].player_id into r448;
    ternary r436 r1.answer[10u32].team_id r0.opponent_answer[10u32].team_id into r449;
    ternary r436 r1.answer[10u32].goalkeeper r0.opponent_answer[10u32].goalkeeper into r450;
    ternary r436 r1.answer[10u32].attack r0.opponent_answer[10u32].attack into r451;
    ternary r436 r1.answer[10u32].defense r0.opponent_answer[10u32].defense into r452;
    ternary r436 r1.answer[10u32].speed r0.opponent_answer[10u32].speed into r453;
    ternary r436 r1.answer[10u32].power r0.opponent_answer[10u32].power into r454;
    ternary r436 r1.answer[10u32].stamina r0.opponent_answer[10u32].stamina into r455;
    ternary r436 r1.answer[10u32].technique r0.opponent_answer[10u32].technique into r456;
    ternary r436 r1.answer[10u32].goalkeeping r0.opponent_answer[10u32].goalkeeping into r457;
    cast r448 r449 r450 r451 r452 r453 r454 r455 r456 r457 into r458 as Player;
    ternary r436 r1.answer[0u32].player_id r0.opponent_answer[0u32].player_id into r459;
    ternary r436 r1.answer[0u32].team_id r0.opponent_answer[0u32].team_id into r460;
    ternary r436 r1.answer[0u32].goalkeeper r0.opponent_answer[0u32].goalkeeper into r461;
    ternary r436 r1.answer[0u32].attack r0.opponent_answer[0u32].attack into r462;
    ternary r436 r1.answer[0u32].defense r0.opponent_answer[0u32].defense into r463;
    ternary r436 r1.answer[0u32].speed r0.opponent_answer[0u32].speed into r464;
    ternary r436 r1.answer[0u32].power r0.opponent_answer[0u32].power into r465;
    ternary r436 r1.answer[0u32].stamina r0.opponent_answer[0u32].stamina into r466;
    ternary r436 r1.answer[0u32].technique r0.opponent_answer[0u32].technique into r467;
    ternary r436 r1.answer[0u32].goalkeeping r0.opponent_answer[0u32].goalkeeping into r468;
    cast r459 r460 r461 r462 r463 r464 r465 r466 r467 r468 into r469 as Player;
    gt r447.attack 127u8 into r470;
    lt r458.defense 127u8 into r471;
    lt r469.goalkeeping 127u8 into r472;
    lt r1.answer[10u32].speed r0.opponent_answer[10u32].speed into r473;
    add r434 1u64 into r474;
    add r435 1u64 into r475;
    ternary r473 r474 r434 into r476;
    ternary r473 r435 r475 into r477;
    ternary r472 r476 r434 into r478;
    ternary r472 r477 r435 into r479;
    ternary r471 r478 r434 into r480;
    ternary r471 r479 r435 into r481;
    ternary r470 r480 r434 into r482;
    ternary r470 r481 r435 into r483;
    assert.eq r1.owner r1.challenger_address;
    cast r1.message_1 r1.message_2 r1.message_3 r1.message_4 r1.message_5 into r484 as Mssage;
    sign.verify r3.sig r1.challenger_address r484 into r485;
    assert.eq true r485;
    cast r1.game_multisig r1.challenger_address r1.opponent_address r1.game_multisig r1.amount r1.nonce r1.answer r3.sig 3u32 into r486 as RevealAnswer.record;
    cast aleo16hf8hfpwasnn9cf7k2c0dllc56nn7qt547qxgvgwu6pznw4trvqsx68kls r1.challenger_address r1.opponent_address r1.game_multisig r1.amount r1.nonce r1.answer r3.sig 4u32 into r487 as AuditRevealAnswer.record;
    call puzzle_pieces_v015.aleo/joint_stake_state_update r2 r3 r1.challenger_address into r488 r489;
    cast r1.opponent_address r1.game_multisig 4field true r2.amount r1.challenger_address r1.opponent_address r1.answer r0.opponent_answer r1.challenger_address r1.challenger_address 9u32 into r490 as GameFinishReqNotification.record;
    cast r1.challenger_address r1.game_multisig 4field true r2.amount r1.challenger_address r1.opponent_address r1.answer r0.opponent_answer r1.challenger_address r1.challenger_address 9u32 into r491 as GameFinishReqNotification.record;
    output r486 as RevealAnswer.record;
    output r487 as AuditRevealAnswer.record;
    output r488 as puzzle_pieces_v015.aleo/JointPieceWinner.record;
    output r489 as puzzle_pieces_v015.aleo/AuditJointPieceWinner.record;
    output r490 as GameFinishReqNotification.record;
    output r491 as GameFinishReqNotification.record;


function finish_game:
    input r0 as Game.record;
    input r1 as puzzle_pieces_v015.aleo/JointPieceWinner.record;
    input r2 as puzzle_pieces_v015.aleo/PieceJointStake.record;
    input r3 as puzzle_pieces_v015.aleo/JointPieceTimeClaim.record;
    assert.eq r0.owner self.signer;
    assert.eq self.caller self.signer;
    is.eq r1.winner r0.challenger_address into r4;
    ternary r4 r0.opponent_address r0.challenger_address into r5;
    call puzzle_pieces_v015.aleo/joint_stake_transfer_to_winner r1 r2 r3 into r6 r7 r8;
    cast r0.owner r0.challenger_commit r0.opponent_answer r0.total_pot r0.challenger_address r0.opponent_address r0.game_multisig 3field 0u32 into r9 as Game.record;
    cast r0.challenger_address r0.game_multisig 5field false r0.total_pot r0.challenger_address r0.opponent_address r1.winner r5 10u32 into r10 as GameFinishedNotification.record;
    cast r0.opponent_address r0.game_multisig 5field false r0.total_pot r0.challenger_address r0.opponent_address r1.winner r5 10u32 into r11 as GameFinishedNotification.record;
    output r6 as puzzle_pieces_v015.aleo/Piece.record;
    output r7 as puzzle_pieces_v015.aleo/AuditTransferToWinner.record;
    output r8 as puzzle_pieces_v015.aleo/AuditPieceOwner.record;
    output r9 as Game.record;
    output r10 as GameFinishedNotification.record;
    output r11 as GameFinishedNotification.record;


function finish_game_by_timeout:
    input r0 as Game.record;
    input r1 as puzzle_pieces_v015.aleo/PieceJointStake.record;
    input r2 as puzzle_pieces_v015.aleo/JointPieceTimeClaim.record;
    input r3 as signature.private;
    assert.eq r0.owner self.signer;
    assert.eq self.caller self.signer;
    cast r0.owner r0.challenger_commit r0.opponent_answer r0.total_pot r0.challenger_address r0.opponent_address r0.game_multisig 3field 0u32 into r4 as Game.record;
    cast r0.challenger_address r0.game_multisig 6field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address r0.challenger_address 10u32 into r5 as GameFinishedNotification.record;
    cast r0.opponent_address r0.game_multisig 6field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address r0.challenger_address 10u32 into r6 as GameFinishedNotification.record;
    call puzzle_pieces_v015.aleo/joint_timeout_to_opponent r1 r2 r3 into r7 r8;
    async finish_game_by_timeout r2.block_ht into r9;
    output r7 as puzzle_pieces_v015.aleo/Piece.record;
    output r8 as puzzle_pieces_v015.aleo/AuditTransferToWinner.record;
    output r4 as Game.record;
    output r5 as GameFinishedNotification.record;
    output r6 as GameFinishedNotification.record;
    output r9 as football_game_v001.aleo/finish_game_by_timeout.future;

finalize finish_game_by_timeout:
    input r0 as u32.public;
    add r0 10000u32 into r1;
    gt block.height r1 into r2;
    assert.eq r2 true;
