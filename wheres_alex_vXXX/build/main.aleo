import puzzle_pieces_v015.aleo;
import multiparty_pvp_utils_v015.aleo;
program football_game_v001.aleo;

























struct Player:
    player_id as u8;
    team_id as u8;
    goalkeeper as boolean;
    attack as u8;
    defense as u8;
    speed as u8;
    power as u8;
    stamina as u8;
    technique as u8;
    goalkeeping as u8;

struct Team:
    team_id as u8;
    players as [Player; 11u32];

record Game:
    owner as address.private;
    challenger_commit as field.private;
    opponent_answer as [u8; 11u32].private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    game_multisig as address.private;
    game_state as field.private;
    ix as u32.private;

record GameReqNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record WaitingAcceptanceNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record StakeRenegedNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    renege_address as address.private;
    ix as u32.private;

record ChallengerWagerNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record OpponentWagerNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record WaitingRevealNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record RevealAnswerNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    opponent_answer as [u8; 11u32].private;
    ix as u32.private;

record GameFinishReqNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    challenger_answer as [u8; 11u32].private;
    opponent_answer as [u8; 11u32].private;
    winner as address.private;
    loser as address.private;
    ix as u32.private;

record GameFinishedNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    winner as address.private;
    loser as address.private;
    ix as u32.private;


mapping player_mapping:
	key as u8.public;
	value as Player.public;


mapping team_mapping:
	key as u8.public;
	value as Team.public;

function main:
    input r0 as boolean.private;


function propose_game:
    input r0 as puzzle_pieces_v015.aleo/Piece.record;
    input r1 as u64.private;
    input r2 as address.private;
    input r3 as address.private;
    input r4 as address.private;
    input r5 as address.private;
    input r6 as field.private;
    input r7 as field.private;
    input r8 as field.private;
    input r9 as field.private;
    input r10 as field.private;
    input r11 as signature.private;
    input r12 as field.private;
    input r13 as [u8; 11u32].private;
    input r14 as field.private;
    assert.eq self.caller self.signer;
    assert.neq r5 r4;
    cast r12 into r15 as scalar;
    commit.bhp256 r13 r15 into r16 as field;
    gt r1 0u64 into r17;
    assert.eq r17 true;
    gte r0.amount r1 into r18;
    assert.eq r18 true;
    call puzzle_pieces_v015.aleo/stake_transfer_in r0 r2 r3 r4 r5 r1 r6 r7 r8 r9 r10 r11 into r19 r20 r21 r22 r23;
    call multiparty_pvp_utils_v015.aleo/mint_multisig_key r14 r1 r3 r4 r5 into r24 r25;
    add r1 r1 into r26;
    cast r4 r5 1field true r26 r3 r4 2u32 into r27 as GameReqNotification.record;
    add r1 r1 into r28;
    cast r3 r5 1field false r28 r3 r4 3u32 into r29 as WaitingAcceptanceNotification.record;
    cast 0u80u80u80u80u80u80u80u80u80u80u8 into r30 as [u8; 11u32];
    add r1 r1 into r31;
    cast r5 r16 r30 r31 r3 r4 r5 1field 1u32 into r32 as Game.record;
    call multiparty_pvp_utils_v015.aleo/mint_answer r3 r4 r5 r1 r12 r13 r6 r7 r8 r9 r10 r11 into r33 r34;
    output r19 as puzzle_pieces_v015.aleo/PieceClaim.record;
    output r20 as puzzle_pieces_v015.aleo/PieceStake.record;
    output r21 as puzzle_pieces_v015.aleo/ClaimSignature.record;
    output r22 as puzzle_pieces_v015.aleo/Piece.record;
    output r23 as puzzle_pieces_v015.aleo/AuditStakeIn.record;
    output r33 as multiparty_pvp_utils_v015.aleo/Answer.record;
    output r34 as multiparty_pvp_utils_v015.aleo/AuditMintAnswer.record;
    output r24 as multiparty_pvp_utils_v015.aleo/Key.record;
    output r25 as multiparty_pvp_utils_v015.aleo/AuditKey.record;
    output r32 as Game.record;
    output r27 as GameReqNotification.record;
    output r29 as WaitingAcceptanceNotification.record;


function challenger_renege_stake:
    input r0 as WaitingAcceptanceNotification.record;
    input r1 as puzzle_pieces_v015.aleo/PieceStake.record;
    input r2 as puzzle_pieces_v015.aleo/PieceClaim.record;
    input r3 as signature.private;
    assert.eq self.caller self.signer;
    call puzzle_pieces_v015.aleo/stake_transfer_out r1 r2 r3 into r4 r5;
    cast r0.challenger_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.challenger_address 4u32 into r6 as StakeRenegedNotification.record;
    cast r0.opponent_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.challenger_address 4u32 into r7 as StakeRenegedNotification.record;
    output r4 as puzzle_pieces_v015.aleo/Piece.record;
    output r5 as puzzle_pieces_v015.aleo/AuditStakeOut.record;
    output r6 as StakeRenegedNotification.record;
    output r7 as StakeRenegedNotification.record;


function submit_wager:
    input r0 as puzzle_pieces_v015.aleo/Piece.record;
    input r1 as multiparty_pvp_utils_v015.aleo/Key.record;
    input r2 as GameReqNotification.record;
    input r3 as field.private;
    input r4 as field.private;
    input r5 as field.private;
    input r6 as field.private;
    input r7 as field.private;
    input r8 as signature.private;
    assert.eq self.caller self.signer;
    gt r0.amount 0u64 into r9;
    assert.eq r9 true;
    div r2.total_pot 2u64 into r10;
    gte r0.amount r10 into r11;
    assert.eq r11 true;
    div r2.total_pot 2u64 into r12;
    call puzzle_pieces_v015.aleo/stake_transfer_in r0 r2.opponent_address r2.challenger_address r2.opponent_address r2.game_multisig r12 r3 r4 r5 r6 r7 r8 into r13 r14 r15 r16 r17;
    cast r2.challenger_address r2.game_multisig 2field false r2.total_pot r2.challenger_address r2.opponent_address 5u32 into r18 as ChallengerWagerNotification.record;
    cast r2.opponent_address r2.game_multisig 2field true r2.total_pot r2.challenger_address r2.opponent_address 6u32 into r19 as OpponentWagerNotification.record;
    output r13 as puzzle_pieces_v015.aleo/PieceClaim.record;
    output r14 as puzzle_pieces_v015.aleo/PieceStake.record;
    output r15 as puzzle_pieces_v015.aleo/ClaimSignature.record;
    output r16 as puzzle_pieces_v015.aleo/Piece.record;
    output r17 as puzzle_pieces_v015.aleo/AuditStakeIn.record;
    output r18 as ChallengerWagerNotification.record;
    output r19 as OpponentWagerNotification.record;


function opponent_renege_stake:
    input r0 as WaitingAcceptanceNotification.record;
    input r1 as puzzle_pieces_v015.aleo/PieceStake.record;
    input r2 as puzzle_pieces_v015.aleo/PieceClaim.record;
    input r3 as signature.private;
    assert.eq self.caller self.signer;
    call puzzle_pieces_v015.aleo/stake_transfer_out r1 r2 r3 into r4 r5;
    cast r0.challenger_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address 4u32 into r6 as StakeRenegedNotification.record;
    cast r0.opponent_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address 4u32 into r7 as StakeRenegedNotification.record;
    output r4 as puzzle_pieces_v015.aleo/Piece.record;
    output r5 as puzzle_pieces_v015.aleo/AuditStakeOut.record;
    output r6 as StakeRenegedNotification.record;
    output r7 as StakeRenegedNotification.record;


function accept_game:
    input r0 as Game.record;
    input r1 as [u8; 11u32].private;
    input r2 as puzzle_pieces_v015.aleo/PieceStake.record;
    input r3 as puzzle_pieces_v015.aleo/PieceClaim.record;
    input r4 as puzzle_pieces_v015.aleo/PieceStake.record;
    input r5 as puzzle_pieces_v015.aleo/PieceClaim.record;
    input r6 as u32.private;
    assert.eq r0.owner self.signer;
    assert.eq self.caller self.signer;
    call puzzle_pieces_v015.aleo/transfer_stakes_to_joint r2 r3 r4 r5 r6 into r7 r8 r9 r10;
    cast r0.opponent_address r0.owner 3field false r0.total_pot r0.challenger_address r0.opponent_address 7u32 into r11 as WaitingRevealNotification.record;
    cast r0.challenger_address r0.owner 3field true r0.total_pot r0.challenger_address r0.opponent_address r1 8u32 into r12 as RevealAnswerNotification.record;
    cast r0.owner r0.challenger_commit r1 r0.total_pot r0.challenger_address r0.opponent_address r0.game_multisig 3field 1u32 into r13 as Game.record;
    async accept_game r6 into r14;
    output r7 as puzzle_pieces_v015.aleo/PieceJointStake.record;
    output r8 as puzzle_pieces_v015.aleo/JointPieceTimeClaim.record;
    output r9 as puzzle_pieces_v015.aleo/JointPieceState.record;
    output r10 as puzzle_pieces_v015.aleo/AuditJointStake.record;
    output r11 as WaitingRevealNotification.record;
    output r12 as RevealAnswerNotification.record;
    output r13 as Game.record;
    output r14 as football_game_v001.aleo/accept_game.future;

finalize accept_game:
    input r0 as u32.public;
    sub block.height 1000u32 into r1;
    gte r0 r1 into r2;
    assert.eq r2 true;
    add block.height 1000u32 into r3;
    lte r0 r3 into r4;
    assert.eq r4 true;


function reveal_answer_new:
    input r0 as RevealAnswerNotification.record;
    input r1 as multiparty_pvp_utils_v015.aleo/Answer.record;
    input r2 as puzzle_pieces_v015.aleo/JointPieceState.record;
    input r3 as puzzle_pieces_v015.aleo/ClaimSignature.record;
    assert.eq r2.state_updater_address self.signer;
    assert.eq self.caller self.signer;
    async reveal_answer_new r0.opponent_answer r1.answer into r4;
    output r4 as football_game_v001.aleo/reveal_answer_new.future;

finalize reveal_answer_new:
    input r0 as [u8; 11u32].public;
    input r1 as [u8; 11u32].public;
    get player_mapping[r1[1u32]] into r2;
    get player_mapping[r0[1u32]] into r3;
    get player_mapping[r0[0u32]] into r4;
    lt r2.speed r3.speed into r5;
    get player_mapping[r0[1u32]] into r6;
    get player_mapping[r1[1u32]] into r7;
    get player_mapping[r1[0u32]] into r8;
    ternary r5 r6.player_id r2.player_id into r9;
    ternary r5 r6.team_id r2.team_id into r10;
    ternary r5 r6.goalkeeper r2.goalkeeper into r11;
    ternary r5 r6.attack r2.attack into r12;
    ternary r5 r6.defense r2.defense into r13;
    ternary r5 r6.speed r2.speed into r14;
    ternary r5 r6.power r2.power into r15;
    ternary r5 r6.stamina r2.stamina into r16;
    ternary r5 r6.technique r2.technique into r17;
    ternary r5 r6.goalkeeping r2.goalkeeping into r18;
    cast r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 into r19 as Player;
    ternary r5 r7.player_id r3.player_id into r20;
    ternary r5 r7.team_id r3.team_id into r21;
    ternary r5 r7.goalkeeper r3.goalkeeper into r22;
    ternary r5 r7.attack r3.attack into r23;
    ternary r5 r7.defense r3.defense into r24;
    ternary r5 r7.speed r3.speed into r25;
    ternary r5 r7.power r3.power into r26;
    ternary r5 r7.stamina r3.stamina into r27;
    ternary r5 r7.technique r3.technique into r28;
    ternary r5 r7.goalkeeping r3.goalkeeping into r29;
    cast r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 into r30 as Player;
    ternary r5 r8.player_id r4.player_id into r31;
    ternary r5 r8.team_id r4.team_id into r32;
    ternary r5 r8.goalkeeper r4.goalkeeper into r33;
    ternary r5 r8.attack r4.attack into r34;
    ternary r5 r8.defense r4.defense into r35;
    ternary r5 r8.speed r4.speed into r36;
    ternary r5 r8.power r4.power into r37;
    ternary r5 r8.stamina r4.stamina into r38;
    ternary r5 r8.technique r4.technique into r39;
    ternary r5 r8.goalkeeping r4.goalkeeping into r40;
    cast r31 r32 r33 r34 r35 r36 r37 r38 r39 r40 into r41 as Player;
    rand.chacha into r42 as u8;
    gt r19.attack r42 into r43;
    rand.chacha into r44 as u8;
    lt r30.defense r44 into r45;
    rand.chacha into r46 as u8;
    lt r41.goalkeeping r46 into r47;
    add 0u64 1u64 into r48;
    add 0u64 1u64 into r49;
    ternary r5 r48 0u64 into r50;
    ternary r5 0u64 r49 into r51;
    ternary r47 r50 0u64 into r52;
    ternary r47 r51 0u64 into r53;
    ternary r45 r52 0u64 into r54;
    ternary r45 r53 0u64 into r55;
    ternary r43 r54 0u64 into r56;
    ternary r43 r55 0u64 into r57;
    get player_mapping[r1[2u32]] into r58;
    get player_mapping[r0[2u32]] into r59;
    get player_mapping[r0[0u32]] into r60;
    lt r58.speed r59.speed into r61;
    get player_mapping[r0[2u32]] into r62;
    get player_mapping[r1[2u32]] into r63;
    get player_mapping[r1[0u32]] into r64;
    ternary r61 r62.player_id r58.player_id into r65;
    ternary r61 r62.team_id r58.team_id into r66;
    ternary r61 r62.goalkeeper r58.goalkeeper into r67;
    ternary r61 r62.attack r58.attack into r68;
    ternary r61 r62.defense r58.defense into r69;
    ternary r61 r62.speed r58.speed into r70;
    ternary r61 r62.power r58.power into r71;
    ternary r61 r62.stamina r58.stamina into r72;
    ternary r61 r62.technique r58.technique into r73;
    ternary r61 r62.goalkeeping r58.goalkeeping into r74;
    cast r65 r66 r67 r68 r69 r70 r71 r72 r73 r74 into r75 as Player;
    ternary r61 r63.player_id r59.player_id into r76;
    ternary r61 r63.team_id r59.team_id into r77;
    ternary r61 r63.goalkeeper r59.goalkeeper into r78;
    ternary r61 r63.attack r59.attack into r79;
    ternary r61 r63.defense r59.defense into r80;
    ternary r61 r63.speed r59.speed into r81;
    ternary r61 r63.power r59.power into r82;
    ternary r61 r63.stamina r59.stamina into r83;
    ternary r61 r63.technique r59.technique into r84;
    ternary r61 r63.goalkeeping r59.goalkeeping into r85;
    cast r76 r77 r78 r79 r80 r81 r82 r83 r84 r85 into r86 as Player;
    ternary r61 r64.player_id r60.player_id into r87;
    ternary r61 r64.team_id r60.team_id into r88;
    ternary r61 r64.goalkeeper r60.goalkeeper into r89;
    ternary r61 r64.attack r60.attack into r90;
    ternary r61 r64.defense r60.defense into r91;
    ternary r61 r64.speed r60.speed into r92;
    ternary r61 r64.power r60.power into r93;
    ternary r61 r64.stamina r60.stamina into r94;
    ternary r61 r64.technique r60.technique into r95;
    ternary r61 r64.goalkeeping r60.goalkeeping into r96;
    cast r87 r88 r89 r90 r91 r92 r93 r94 r95 r96 into r97 as Player;
    rand.chacha into r98 as u8;
    gt r75.attack r98 into r99;
    rand.chacha into r100 as u8;
    lt r86.defense r100 into r101;
    rand.chacha into r102 as u8;
    lt r97.goalkeeping r102 into r103;
    add r56 1u64 into r104;
    add r57 1u64 into r105;
    ternary r61 r104 r56 into r106;
    ternary r61 r57 r105 into r107;
    ternary r103 r106 r56 into r108;
    ternary r103 r107 r57 into r109;
    ternary r101 r108 r56 into r110;
    ternary r101 r109 r57 into r111;
    ternary r99 r110 r56 into r112;
    ternary r99 r111 r57 into r113;
    get player_mapping[r1[3u32]] into r114;
    get player_mapping[r0[3u32]] into r115;
    get player_mapping[r0[0u32]] into r116;
    lt r114.speed r115.speed into r117;
    get player_mapping[r0[3u32]] into r118;
    get player_mapping[r1[3u32]] into r119;
    get player_mapping[r1[0u32]] into r120;
    ternary r117 r118.player_id r114.player_id into r121;
    ternary r117 r118.team_id r114.team_id into r122;
    ternary r117 r118.goalkeeper r114.goalkeeper into r123;
    ternary r117 r118.attack r114.attack into r124;
    ternary r117 r118.defense r114.defense into r125;
    ternary r117 r118.speed r114.speed into r126;
    ternary r117 r118.power r114.power into r127;
    ternary r117 r118.stamina r114.stamina into r128;
    ternary r117 r118.technique r114.technique into r129;
    ternary r117 r118.goalkeeping r114.goalkeeping into r130;
    cast r121 r122 r123 r124 r125 r126 r127 r128 r129 r130 into r131 as Player;
    ternary r117 r119.player_id r115.player_id into r132;
    ternary r117 r119.team_id r115.team_id into r133;
    ternary r117 r119.goalkeeper r115.goalkeeper into r134;
    ternary r117 r119.attack r115.attack into r135;
    ternary r117 r119.defense r115.defense into r136;
    ternary r117 r119.speed r115.speed into r137;
    ternary r117 r119.power r115.power into r138;
    ternary r117 r119.stamina r115.stamina into r139;
    ternary r117 r119.technique r115.technique into r140;
    ternary r117 r119.goalkeeping r115.goalkeeping into r141;
    cast r132 r133 r134 r135 r136 r137 r138 r139 r140 r141 into r142 as Player;
    ternary r117 r120.player_id r116.player_id into r143;
    ternary r117 r120.team_id r116.team_id into r144;
    ternary r117 r120.goalkeeper r116.goalkeeper into r145;
    ternary r117 r120.attack r116.attack into r146;
    ternary r117 r120.defense r116.defense into r147;
    ternary r117 r120.speed r116.speed into r148;
    ternary r117 r120.power r116.power into r149;
    ternary r117 r120.stamina r116.stamina into r150;
    ternary r117 r120.technique r116.technique into r151;
    ternary r117 r120.goalkeeping r116.goalkeeping into r152;
    cast r143 r144 r145 r146 r147 r148 r149 r150 r151 r152 into r153 as Player;
    rand.chacha into r154 as u8;
    gt r131.attack r154 into r155;
    rand.chacha into r156 as u8;
    lt r142.defense r156 into r157;
    rand.chacha into r158 as u8;
    lt r153.goalkeeping r158 into r159;
    add r112 1u64 into r160;
    add r113 1u64 into r161;
    ternary r117 r160 r112 into r162;
    ternary r117 r113 r161 into r163;
    ternary r159 r162 r112 into r164;
    ternary r159 r163 r113 into r165;
    ternary r157 r164 r112 into r166;
    ternary r157 r165 r113 into r167;
    ternary r155 r166 r112 into r168;
    ternary r155 r167 r113 into r169;
    get player_mapping[r1[4u32]] into r170;
    get player_mapping[r0[4u32]] into r171;
    get player_mapping[r0[0u32]] into r172;
    lt r170.speed r171.speed into r173;
    get player_mapping[r0[4u32]] into r174;
    get player_mapping[r1[4u32]] into r175;
    get player_mapping[r1[0u32]] into r176;
    ternary r173 r174.player_id r170.player_id into r177;
    ternary r173 r174.team_id r170.team_id into r178;
    ternary r173 r174.goalkeeper r170.goalkeeper into r179;
    ternary r173 r174.attack r170.attack into r180;
    ternary r173 r174.defense r170.defense into r181;
    ternary r173 r174.speed r170.speed into r182;
    ternary r173 r174.power r170.power into r183;
    ternary r173 r174.stamina r170.stamina into r184;
    ternary r173 r174.technique r170.technique into r185;
    ternary r173 r174.goalkeeping r170.goalkeeping into r186;
    cast r177 r178 r179 r180 r181 r182 r183 r184 r185 r186 into r187 as Player;
    ternary r173 r175.player_id r171.player_id into r188;
    ternary r173 r175.team_id r171.team_id into r189;
    ternary r173 r175.goalkeeper r171.goalkeeper into r190;
    ternary r173 r175.attack r171.attack into r191;
    ternary r173 r175.defense r171.defense into r192;
    ternary r173 r175.speed r171.speed into r193;
    ternary r173 r175.power r171.power into r194;
    ternary r173 r175.stamina r171.stamina into r195;
    ternary r173 r175.technique r171.technique into r196;
    ternary r173 r175.goalkeeping r171.goalkeeping into r197;
    cast r188 r189 r190 r191 r192 r193 r194 r195 r196 r197 into r198 as Player;
    ternary r173 r176.player_id r172.player_id into r199;
    ternary r173 r176.team_id r172.team_id into r200;
    ternary r173 r176.goalkeeper r172.goalkeeper into r201;
    ternary r173 r176.attack r172.attack into r202;
    ternary r173 r176.defense r172.defense into r203;
    ternary r173 r176.speed r172.speed into r204;
    ternary r173 r176.power r172.power into r205;
    ternary r173 r176.stamina r172.stamina into r206;
    ternary r173 r176.technique r172.technique into r207;
    ternary r173 r176.goalkeeping r172.goalkeeping into r208;
    cast r199 r200 r201 r202 r203 r204 r205 r206 r207 r208 into r209 as Player;
    rand.chacha into r210 as u8;
    gt r187.attack r210 into r211;
    rand.chacha into r212 as u8;
    lt r198.defense r212 into r213;
    rand.chacha into r214 as u8;
    lt r209.goalkeeping r214 into r215;
    add r168 1u64 into r216;
    add r169 1u64 into r217;
    ternary r173 r216 r168 into r218;
    ternary r173 r169 r217 into r219;
    ternary r215 r218 r168 into r220;
    ternary r215 r219 r169 into r221;
    ternary r213 r220 r168 into r222;
    ternary r213 r221 r169 into r223;
    ternary r211 r222 r168 into r224;
    ternary r211 r223 r169 into r225;
    get player_mapping[r1[5u32]] into r226;
    get player_mapping[r0[5u32]] into r227;
    get player_mapping[r0[0u32]] into r228;
    lt r226.speed r227.speed into r229;
    get player_mapping[r0[5u32]] into r230;
    get player_mapping[r1[5u32]] into r231;
    get player_mapping[r1[0u32]] into r232;
    ternary r229 r230.player_id r226.player_id into r233;
    ternary r229 r230.team_id r226.team_id into r234;
    ternary r229 r230.goalkeeper r226.goalkeeper into r235;
    ternary r229 r230.attack r226.attack into r236;
    ternary r229 r230.defense r226.defense into r237;
    ternary r229 r230.speed r226.speed into r238;
    ternary r229 r230.power r226.power into r239;
    ternary r229 r230.stamina r226.stamina into r240;
    ternary r229 r230.technique r226.technique into r241;
    ternary r229 r230.goalkeeping r226.goalkeeping into r242;
    cast r233 r234 r235 r236 r237 r238 r239 r240 r241 r242 into r243 as Player;
    ternary r229 r231.player_id r227.player_id into r244;
    ternary r229 r231.team_id r227.team_id into r245;
    ternary r229 r231.goalkeeper r227.goalkeeper into r246;
    ternary r229 r231.attack r227.attack into r247;
    ternary r229 r231.defense r227.defense into r248;
    ternary r229 r231.speed r227.speed into r249;
    ternary r229 r231.power r227.power into r250;
    ternary r229 r231.stamina r227.stamina into r251;
    ternary r229 r231.technique r227.technique into r252;
    ternary r229 r231.goalkeeping r227.goalkeeping into r253;
    cast r244 r245 r246 r247 r248 r249 r250 r251 r252 r253 into r254 as Player;
    ternary r229 r232.player_id r228.player_id into r255;
    ternary r229 r232.team_id r228.team_id into r256;
    ternary r229 r232.goalkeeper r228.goalkeeper into r257;
    ternary r229 r232.attack r228.attack into r258;
    ternary r229 r232.defense r228.defense into r259;
    ternary r229 r232.speed r228.speed into r260;
    ternary r229 r232.power r228.power into r261;
    ternary r229 r232.stamina r228.stamina into r262;
    ternary r229 r232.technique r228.technique into r263;
    ternary r229 r232.goalkeeping r228.goalkeeping into r264;
    cast r255 r256 r257 r258 r259 r260 r261 r262 r263 r264 into r265 as Player;
    rand.chacha into r266 as u8;
    gt r243.attack r266 into r267;
    rand.chacha into r268 as u8;
    lt r254.defense r268 into r269;
    rand.chacha into r270 as u8;
    lt r265.goalkeeping r270 into r271;
    add r224 1u64 into r272;
    add r225 1u64 into r273;
    ternary r229 r272 r224 into r274;
    ternary r229 r225 r273 into r275;
    ternary r271 r274 r224 into r276;
    ternary r271 r275 r225 into r277;
    ternary r269 r276 r224 into r278;
    ternary r269 r277 r225 into r279;
    ternary r267 r278 r224 into r280;
    ternary r267 r279 r225 into r281;
    get player_mapping[r1[6u32]] into r282;
    get player_mapping[r0[6u32]] into r283;
    get player_mapping[r0[0u32]] into r284;
    lt r282.speed r283.speed into r285;
    get player_mapping[r0[6u32]] into r286;
    get player_mapping[r1[6u32]] into r287;
    get player_mapping[r1[0u32]] into r288;
    ternary r285 r286.player_id r282.player_id into r289;
    ternary r285 r286.team_id r282.team_id into r290;
    ternary r285 r286.goalkeeper r282.goalkeeper into r291;
    ternary r285 r286.attack r282.attack into r292;
    ternary r285 r286.defense r282.defense into r293;
    ternary r285 r286.speed r282.speed into r294;
    ternary r285 r286.power r282.power into r295;
    ternary r285 r286.stamina r282.stamina into r296;
    ternary r285 r286.technique r282.technique into r297;
    ternary r285 r286.goalkeeping r282.goalkeeping into r298;
    cast r289 r290 r291 r292 r293 r294 r295 r296 r297 r298 into r299 as Player;
    ternary r285 r287.player_id r283.player_id into r300;
    ternary r285 r287.team_id r283.team_id into r301;
    ternary r285 r287.goalkeeper r283.goalkeeper into r302;
    ternary r285 r287.attack r283.attack into r303;
    ternary r285 r287.defense r283.defense into r304;
    ternary r285 r287.speed r283.speed into r305;
    ternary r285 r287.power r283.power into r306;
    ternary r285 r287.stamina r283.stamina into r307;
    ternary r285 r287.technique r283.technique into r308;
    ternary r285 r287.goalkeeping r283.goalkeeping into r309;
    cast r300 r301 r302 r303 r304 r305 r306 r307 r308 r309 into r310 as Player;
    ternary r285 r288.player_id r284.player_id into r311;
    ternary r285 r288.team_id r284.team_id into r312;
    ternary r285 r288.goalkeeper r284.goalkeeper into r313;
    ternary r285 r288.attack r284.attack into r314;
    ternary r285 r288.defense r284.defense into r315;
    ternary r285 r288.speed r284.speed into r316;
    ternary r285 r288.power r284.power into r317;
    ternary r285 r288.stamina r284.stamina into r318;
    ternary r285 r288.technique r284.technique into r319;
    ternary r285 r288.goalkeeping r284.goalkeeping into r320;
    cast r311 r312 r313 r314 r315 r316 r317 r318 r319 r320 into r321 as Player;
    rand.chacha into r322 as u8;
    gt r299.attack r322 into r323;
    rand.chacha into r324 as u8;
    lt r310.defense r324 into r325;
    rand.chacha into r326 as u8;
    lt r321.goalkeeping r326 into r327;
    add r280 1u64 into r328;
    add r281 1u64 into r329;
    ternary r285 r328 r280 into r330;
    ternary r285 r281 r329 into r331;
    ternary r327 r330 r280 into r332;
    ternary r327 r331 r281 into r333;
    ternary r325 r332 r280 into r334;
    ternary r325 r333 r281 into r335;
    ternary r323 r334 r280 into r336;
    ternary r323 r335 r281 into r337;
    get player_mapping[r1[7u32]] into r338;
    get player_mapping[r0[7u32]] into r339;
    get player_mapping[r0[0u32]] into r340;
    lt r338.speed r339.speed into r341;
    get player_mapping[r0[7u32]] into r342;
    get player_mapping[r1[7u32]] into r343;
    get player_mapping[r1[0u32]] into r344;
    ternary r341 r342.player_id r338.player_id into r345;
    ternary r341 r342.team_id r338.team_id into r346;
    ternary r341 r342.goalkeeper r338.goalkeeper into r347;
    ternary r341 r342.attack r338.attack into r348;
    ternary r341 r342.defense r338.defense into r349;
    ternary r341 r342.speed r338.speed into r350;
    ternary r341 r342.power r338.power into r351;
    ternary r341 r342.stamina r338.stamina into r352;
    ternary r341 r342.technique r338.technique into r353;
    ternary r341 r342.goalkeeping r338.goalkeeping into r354;
    cast r345 r346 r347 r348 r349 r350 r351 r352 r353 r354 into r355 as Player;
    ternary r341 r343.player_id r339.player_id into r356;
    ternary r341 r343.team_id r339.team_id into r357;
    ternary r341 r343.goalkeeper r339.goalkeeper into r358;
    ternary r341 r343.attack r339.attack into r359;
    ternary r341 r343.defense r339.defense into r360;
    ternary r341 r343.speed r339.speed into r361;
    ternary r341 r343.power r339.power into r362;
    ternary r341 r343.stamina r339.stamina into r363;
    ternary r341 r343.technique r339.technique into r364;
    ternary r341 r343.goalkeeping r339.goalkeeping into r365;
    cast r356 r357 r358 r359 r360 r361 r362 r363 r364 r365 into r366 as Player;
    ternary r341 r344.player_id r340.player_id into r367;
    ternary r341 r344.team_id r340.team_id into r368;
    ternary r341 r344.goalkeeper r340.goalkeeper into r369;
    ternary r341 r344.attack r340.attack into r370;
    ternary r341 r344.defense r340.defense into r371;
    ternary r341 r344.speed r340.speed into r372;
    ternary r341 r344.power r340.power into r373;
    ternary r341 r344.stamina r340.stamina into r374;
    ternary r341 r344.technique r340.technique into r375;
    ternary r341 r344.goalkeeping r340.goalkeeping into r376;
    cast r367 r368 r369 r370 r371 r372 r373 r374 r375 r376 into r377 as Player;
    rand.chacha into r378 as u8;
    gt r355.attack r378 into r379;
    rand.chacha into r380 as u8;
    lt r366.defense r380 into r381;
    rand.chacha into r382 as u8;
    lt r377.goalkeeping r382 into r383;
    add r336 1u64 into r384;
    add r337 1u64 into r385;
    ternary r341 r384 r336 into r386;
    ternary r341 r337 r385 into r387;
    ternary r383 r386 r336 into r388;
    ternary r383 r387 r337 into r389;
    ternary r381 r388 r336 into r390;
    ternary r381 r389 r337 into r391;
    ternary r379 r390 r336 into r392;
    ternary r379 r391 r337 into r393;
    get player_mapping[r1[8u32]] into r394;
    get player_mapping[r0[8u32]] into r395;
    get player_mapping[r0[0u32]] into r396;
    lt r394.speed r395.speed into r397;
    get player_mapping[r0[8u32]] into r398;
    get player_mapping[r1[8u32]] into r399;
    get player_mapping[r1[0u32]] into r400;
    ternary r397 r398.player_id r394.player_id into r401;
    ternary r397 r398.team_id r394.team_id into r402;
    ternary r397 r398.goalkeeper r394.goalkeeper into r403;
    ternary r397 r398.attack r394.attack into r404;
    ternary r397 r398.defense r394.defense into r405;
    ternary r397 r398.speed r394.speed into r406;
    ternary r397 r398.power r394.power into r407;
    ternary r397 r398.stamina r394.stamina into r408;
    ternary r397 r398.technique r394.technique into r409;
    ternary r397 r398.goalkeeping r394.goalkeeping into r410;
    cast r401 r402 r403 r404 r405 r406 r407 r408 r409 r410 into r411 as Player;
    ternary r397 r399.player_id r395.player_id into r412;
    ternary r397 r399.team_id r395.team_id into r413;
    ternary r397 r399.goalkeeper r395.goalkeeper into r414;
    ternary r397 r399.attack r395.attack into r415;
    ternary r397 r399.defense r395.defense into r416;
    ternary r397 r399.speed r395.speed into r417;
    ternary r397 r399.power r395.power into r418;
    ternary r397 r399.stamina r395.stamina into r419;
    ternary r397 r399.technique r395.technique into r420;
    ternary r397 r399.goalkeeping r395.goalkeeping into r421;
    cast r412 r413 r414 r415 r416 r417 r418 r419 r420 r421 into r422 as Player;
    ternary r397 r400.player_id r396.player_id into r423;
    ternary r397 r400.team_id r396.team_id into r424;
    ternary r397 r400.goalkeeper r396.goalkeeper into r425;
    ternary r397 r400.attack r396.attack into r426;
    ternary r397 r400.defense r396.defense into r427;
    ternary r397 r400.speed r396.speed into r428;
    ternary r397 r400.power r396.power into r429;
    ternary r397 r400.stamina r396.stamina into r430;
    ternary r397 r400.technique r396.technique into r431;
    ternary r397 r400.goalkeeping r396.goalkeeping into r432;
    cast r423 r424 r425 r426 r427 r428 r429 r430 r431 r432 into r433 as Player;
    rand.chacha into r434 as u8;
    gt r411.attack r434 into r435;
    rand.chacha into r436 as u8;
    lt r422.defense r436 into r437;
    rand.chacha into r438 as u8;
    lt r433.goalkeeping r438 into r439;
    add r392 1u64 into r440;
    add r393 1u64 into r441;
    ternary r397 r440 r392 into r442;
    ternary r397 r393 r441 into r443;
    ternary r439 r442 r392 into r444;
    ternary r439 r443 r393 into r445;
    ternary r437 r444 r392 into r446;
    ternary r437 r445 r393 into r447;
    ternary r435 r446 r392 into r448;
    ternary r435 r447 r393 into r449;
    get player_mapping[r1[9u32]] into r450;
    get player_mapping[r0[9u32]] into r451;
    get player_mapping[r0[0u32]] into r452;
    lt r450.speed r451.speed into r453;
    get player_mapping[r0[9u32]] into r454;
    get player_mapping[r1[9u32]] into r455;
    get player_mapping[r1[0u32]] into r456;
    ternary r453 r454.player_id r450.player_id into r457;
    ternary r453 r454.team_id r450.team_id into r458;
    ternary r453 r454.goalkeeper r450.goalkeeper into r459;
    ternary r453 r454.attack r450.attack into r460;
    ternary r453 r454.defense r450.defense into r461;
    ternary r453 r454.speed r450.speed into r462;
    ternary r453 r454.power r450.power into r463;
    ternary r453 r454.stamina r450.stamina into r464;
    ternary r453 r454.technique r450.technique into r465;
    ternary r453 r454.goalkeeping r450.goalkeeping into r466;
    cast r457 r458 r459 r460 r461 r462 r463 r464 r465 r466 into r467 as Player;
    ternary r453 r455.player_id r451.player_id into r468;
    ternary r453 r455.team_id r451.team_id into r469;
    ternary r453 r455.goalkeeper r451.goalkeeper into r470;
    ternary r453 r455.attack r451.attack into r471;
    ternary r453 r455.defense r451.defense into r472;
    ternary r453 r455.speed r451.speed into r473;
    ternary r453 r455.power r451.power into r474;
    ternary r453 r455.stamina r451.stamina into r475;
    ternary r453 r455.technique r451.technique into r476;
    ternary r453 r455.goalkeeping r451.goalkeeping into r477;
    cast r468 r469 r470 r471 r472 r473 r474 r475 r476 r477 into r478 as Player;
    ternary r453 r456.player_id r452.player_id into r479;
    ternary r453 r456.team_id r452.team_id into r480;
    ternary r453 r456.goalkeeper r452.goalkeeper into r481;
    ternary r453 r456.attack r452.attack into r482;
    ternary r453 r456.defense r452.defense into r483;
    ternary r453 r456.speed r452.speed into r484;
    ternary r453 r456.power r452.power into r485;
    ternary r453 r456.stamina r452.stamina into r486;
    ternary r453 r456.technique r452.technique into r487;
    ternary r453 r456.goalkeeping r452.goalkeeping into r488;
    cast r479 r480 r481 r482 r483 r484 r485 r486 r487 r488 into r489 as Player;
    rand.chacha into r490 as u8;
    gt r467.attack r490 into r491;
    rand.chacha into r492 as u8;
    lt r478.defense r492 into r493;
    rand.chacha into r494 as u8;
    lt r489.goalkeeping r494 into r495;
    add r448 1u64 into r496;
    add r449 1u64 into r497;
    ternary r453 r496 r448 into r498;
    ternary r453 r449 r497 into r499;
    ternary r495 r498 r448 into r500;
    ternary r495 r499 r449 into r501;
    ternary r493 r500 r448 into r502;
    ternary r493 r501 r449 into r503;
    ternary r491 r502 r448 into r504;
    ternary r491 r503 r449 into r505;
    get player_mapping[r1[10u32]] into r506;
    get player_mapping[r0[10u32]] into r507;
    get player_mapping[r0[0u32]] into r508;
    lt r506.speed r507.speed into r509;
    get player_mapping[r0[10u32]] into r510;
    get player_mapping[r1[10u32]] into r511;
    get player_mapping[r1[0u32]] into r512;
    ternary r509 r510.player_id r506.player_id into r513;
    ternary r509 r510.team_id r506.team_id into r514;
    ternary r509 r510.goalkeeper r506.goalkeeper into r515;
    ternary r509 r510.attack r506.attack into r516;
    ternary r509 r510.defense r506.defense into r517;
    ternary r509 r510.speed r506.speed into r518;
    ternary r509 r510.power r506.power into r519;
    ternary r509 r510.stamina r506.stamina into r520;
    ternary r509 r510.technique r506.technique into r521;
    ternary r509 r510.goalkeeping r506.goalkeeping into r522;
    cast r513 r514 r515 r516 r517 r518 r519 r520 r521 r522 into r523 as Player;
    ternary r509 r511.player_id r507.player_id into r524;
    ternary r509 r511.team_id r507.team_id into r525;
    ternary r509 r511.goalkeeper r507.goalkeeper into r526;
    ternary r509 r511.attack r507.attack into r527;
    ternary r509 r511.defense r507.defense into r528;
    ternary r509 r511.speed r507.speed into r529;
    ternary r509 r511.power r507.power into r530;
    ternary r509 r511.stamina r507.stamina into r531;
    ternary r509 r511.technique r507.technique into r532;
    ternary r509 r511.goalkeeping r507.goalkeeping into r533;
    cast r524 r525 r526 r527 r528 r529 r530 r531 r532 r533 into r534 as Player;
    ternary r509 r512.player_id r508.player_id into r535;
    ternary r509 r512.team_id r508.team_id into r536;
    ternary r509 r512.goalkeeper r508.goalkeeper into r537;
    ternary r509 r512.attack r508.attack into r538;
    ternary r509 r512.defense r508.defense into r539;
    ternary r509 r512.speed r508.speed into r540;
    ternary r509 r512.power r508.power into r541;
    ternary r509 r512.stamina r508.stamina into r542;
    ternary r509 r512.technique r508.technique into r543;
    ternary r509 r512.goalkeeping r508.goalkeeping into r544;
    cast r535 r536 r537 r538 r539 r540 r541 r542 r543 r544 into r545 as Player;
    rand.chacha into r546 as u8;
    gt r523.attack r546 into r547;
    rand.chacha into r548 as u8;
    lt r534.defense r548 into r549;
    rand.chacha into r550 as u8;
    lt r545.goalkeeping r550 into r551;
    add r504 1u64 into r552;
    add r505 1u64 into r553;
    ternary r509 r552 r504 into r554;
    ternary r509 r505 r553 into r555;
    ternary r551 r554 r504 into r556;
    ternary r551 r555 r505 into r557;
    ternary r549 r556 r504 into r558;
    ternary r549 r557 r505 into r559;
    ternary r547 r558 r504 into r560;
    ternary r547 r559 r505 into r561;


function reveal_answer_game:
    input r0 as RevealAnswerNotification.record;
    input r1 as multiparty_pvp_utils_v015.aleo/Answer.record;
    input r2 as puzzle_pieces_v015.aleo/JointPieceState.record;
    input r3 as puzzle_pieces_v015.aleo/ClaimSignature.record;
    assert.eq r2.state_updater_address self.signer;
    assert.eq self.caller self.signer;
    call multiparty_pvp_utils_v015.aleo/reveal_answer r1 r3.sig into r4 r5;
    call puzzle_pieces_v015.aleo/joint_stake_state_update r2 r3 r1.challenger_address into r6 r7;
    cast r1.opponent_address r1.game_multisig 4field true r2.amount r1.challenger_address r1.opponent_address r1.answer r0.opponent_answer r1.challenger_address r1.challenger_address 9u32 into r8 as GameFinishReqNotification.record;
    cast r1.challenger_address r1.game_multisig 4field true r2.amount r1.challenger_address r1.opponent_address r1.answer r0.opponent_answer r1.challenger_address r1.challenger_address 9u32 into r9 as GameFinishReqNotification.record;
    output r4 as multiparty_pvp_utils_v015.aleo/RevealAnswer.record;
    output r5 as multiparty_pvp_utils_v015.aleo/AuditRevealAnswer.record;
    output r6 as puzzle_pieces_v015.aleo/JointPieceWinner.record;
    output r7 as puzzle_pieces_v015.aleo/AuditJointPieceWinner.record;
    output r8 as GameFinishReqNotification.record;
    output r9 as GameFinishReqNotification.record;


function finish_game:
    input r0 as Game.record;
    input r1 as puzzle_pieces_v015.aleo/JointPieceWinner.record;
    input r2 as puzzle_pieces_v015.aleo/PieceJointStake.record;
    input r3 as puzzle_pieces_v015.aleo/JointPieceTimeClaim.record;
    assert.eq r0.owner self.signer;
    assert.eq self.caller self.signer;
    is.eq r1.winner r0.challenger_address into r4;
    ternary r4 r0.opponent_address r0.challenger_address into r5;
    call puzzle_pieces_v015.aleo/joint_stake_transfer_to_winner r1 r2 r3 into r6 r7 r8;
    cast r0.owner r0.challenger_commit r0.opponent_answer r0.total_pot r0.challenger_address r0.opponent_address r0.game_multisig 3field 0u32 into r9 as Game.record;
    cast r0.challenger_address r0.game_multisig 5field false r0.total_pot r0.challenger_address r0.opponent_address r1.winner r5 10u32 into r10 as GameFinishedNotification.record;
    cast r0.opponent_address r0.game_multisig 5field false r0.total_pot r0.challenger_address r0.opponent_address r1.winner r5 10u32 into r11 as GameFinishedNotification.record;
    output r6 as puzzle_pieces_v015.aleo/Piece.record;
    output r7 as puzzle_pieces_v015.aleo/AuditTransferToWinner.record;
    output r8 as puzzle_pieces_v015.aleo/AuditPieceOwner.record;
    output r9 as Game.record;
    output r10 as GameFinishedNotification.record;
    output r11 as GameFinishedNotification.record;


function finish_game_by_timeout:
    input r0 as Game.record;
    input r1 as puzzle_pieces_v015.aleo/PieceJointStake.record;
    input r2 as puzzle_pieces_v015.aleo/JointPieceTimeClaim.record;
    input r3 as signature.private;
    assert.eq r0.owner self.signer;
    assert.eq self.caller self.signer;
    cast r0.owner r0.challenger_commit r0.opponent_answer r0.total_pot r0.challenger_address r0.opponent_address r0.game_multisig 3field 0u32 into r4 as Game.record;
    cast r0.challenger_address r0.game_multisig 6field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address r0.challenger_address 10u32 into r5 as GameFinishedNotification.record;
    cast r0.opponent_address r0.game_multisig 6field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address r0.challenger_address 10u32 into r6 as GameFinishedNotification.record;
    call puzzle_pieces_v015.aleo/joint_timeout_to_opponent r1 r2 r3 into r7 r8;
    async finish_game_by_timeout r2.block_ht into r9;
    output r7 as puzzle_pieces_v015.aleo/Piece.record;
    output r8 as puzzle_pieces_v015.aleo/AuditTransferToWinner.record;
    output r4 as Game.record;
    output r5 as GameFinishedNotification.record;
    output r6 as GameFinishedNotification.record;
    output r9 as football_game_v001.aleo/finish_game_by_timeout.future;

finalize finish_game_by_timeout:
    input r0 as u32.public;
    add r0 10000u32 into r1;
    gt block.height r1 into r2;
    assert.eq r2 true;
